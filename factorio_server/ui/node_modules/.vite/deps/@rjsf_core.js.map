{
  "version": 3,
  "sources": ["../../lodash-es/_basePickBy.js", "../../lodash-es/_basePick.js", "../../lodash-es/pick.js", "../../nanoid/index.browser.js", "../../markdown-to-jsx/index.tsx", "../../lodash-es/unset.js", "../../@rjsf/core/src/components/fields/ArrayField.tsx", "../../@rjsf/core/src/components/fields/BooleanField.tsx", "../../@rjsf/core/src/components/fields/MultiSchemaField.tsx", "../../@rjsf/core/src/components/fields/NumberField.tsx", "../../@rjsf/core/src/components/fields/ObjectField.tsx", "../../@rjsf/core/src/components/fields/SchemaField.tsx", "../../@rjsf/core/src/components/fields/StringField.tsx", "../../@rjsf/core/src/components/fields/NullField.tsx", "../../@rjsf/core/src/components/fields/index.ts", "../../@rjsf/core/src/components/templates/ArrayFieldDescriptionTemplate.tsx", "../../@rjsf/core/src/components/templates/ArrayFieldItemTemplate.tsx", "../../@rjsf/core/src/components/templates/ArrayFieldTemplate.tsx", "../../@rjsf/core/src/components/templates/ArrayFieldTitleTemplate.tsx", "../../@rjsf/core/src/components/templates/BaseInputTemplate.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/SubmitButton.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/IconButton.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/AddButton.tsx", "../../@rjsf/core/src/components/templates/ButtonTemplates/index.ts", "../../@rjsf/core/src/components/templates/DescriptionField.tsx", "../../@rjsf/core/src/components/templates/ErrorList.tsx", "../../@rjsf/core/src/components/templates/FieldTemplate/Label.tsx", "../../@rjsf/core/src/components/templates/FieldTemplate/FieldTemplate.tsx", "../../@rjsf/core/src/components/templates/FieldErrorTemplate.tsx", "../../@rjsf/core/src/components/templates/FieldHelpTemplate.tsx", "../../@rjsf/core/src/components/templates/ObjectFieldTemplate.tsx", "../../@rjsf/core/src/components/templates/TitleField.tsx", "../../@rjsf/core/src/components/templates/UnsupportedField.tsx", "../../@rjsf/core/src/components/templates/WrapIfAdditionalTemplate.tsx", "../../@rjsf/core/src/components/templates/index.ts", "../../@rjsf/core/src/components/widgets/AltDateWidget.tsx", "../../@rjsf/core/src/components/widgets/AltDateTimeWidget.tsx", "../../@rjsf/core/src/components/widgets/CheckboxWidget.tsx", "../../@rjsf/core/src/components/widgets/CheckboxesWidget.tsx", "../../@rjsf/core/src/components/widgets/ColorWidget.tsx", "../../@rjsf/core/src/components/widgets/DateWidget.tsx", "../../@rjsf/core/src/components/widgets/DateTimeWidget.tsx", "../../@rjsf/core/src/components/widgets/EmailWidget.tsx", "../../@rjsf/core/src/components/widgets/FileWidget.tsx", "../../@rjsf/core/src/components/widgets/HiddenWidget.tsx", "../../@rjsf/core/src/components/widgets/PasswordWidget.tsx", "../../@rjsf/core/src/components/widgets/RadioWidget.tsx", "../../@rjsf/core/src/components/widgets/RangeWidget.tsx", "../../@rjsf/core/src/components/widgets/SelectWidget.tsx", "../../@rjsf/core/src/components/widgets/TextareaWidget.tsx", "../../@rjsf/core/src/components/widgets/TextWidget.tsx", "../../@rjsf/core/src/components/widgets/TimeWidget.tsx", "../../@rjsf/core/src/components/widgets/URLWidget.tsx", "../../@rjsf/core/src/components/widgets/UpDownWidget.tsx", "../../@rjsf/core/src/components/widgets/index.ts", "../../@rjsf/core/src/getDefaultRegistry.ts", "../../@rjsf/core/src/components/Form.tsx", "../../@rjsf/core/src/withTheme.tsx"],
  "sourcesContent": ["import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n", "import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n", "import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n", "import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n", "/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. üôèüèº\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ‚Ü≥ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ‚Üì                ‚Ü≥ disabled: true\n *                     ‚Ü≥ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ‚Ü≥ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-zA-Z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_MARKED_R = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(h: any, type: LIST_TYPE) {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state._list || (!state._inline && !state._simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state._list to true, and state._inline depending\n        // on our list's looseness.\n        const oldStateInline = state._inline\n        const oldStateList = state._list\n        state._list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state._inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state._inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state._inline = oldStateInline\n        state._list = oldStateList\n\n        return result\n      })\n\n      return {\n        _items: itemContent,\n        _ordered: ordered,\n        _start: start,\n      }\n    },\n    _react(node, output, state) {\n      const Tag = node._ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag key={state._key} start={node._start}>\n          {node._items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  } as MarkdownToJSX.Rule<{\n    _items: MarkdownToJSX.ParserResult[]\n    _ordered: boolean\n    _start?: number\n  }>\n}\n\nconst LINK_R = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\nconst IMAGE_R = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[√Ä√Å√Ç√É√Ñ√Ö√†√°√¢√£√§√•√¶√Ü]/g, 'a')\n    .replace(/[√ß√á]/g, 'c')\n    .replace(/[√∞√ê]/g, 'd')\n    .replace(/[√à√â√ä√ã√©√®√™√´]/g, 'e')\n    .replace(/[√è√Ø√é√Æ√ç√≠√å√¨]/g, 'i')\n    .replace(/[√ë√±]/g, 'n')\n    .replace(/[√∏√ò≈ì≈í√ï√µ√î√¥√ì√≥√í√≤]/g, 'o')\n    .replace(/[√ú√º√õ√ª√ö√∫√ô√π]/g, 'u')\n    .replace(/[≈∏√ø√ù√Ω]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node._content = node._content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    _align: align,\n    _cells: cells,\n    _header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node._align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node._align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    _content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { _footnote: string; _identifier: string }[] = []\n  const refs: { [key: string]: { _target: string; _title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node._content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          _lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code\n              {...node._attrs}\n              className={node._lang ? `lang-${node._lang}` : ''}\n            >\n              {node._content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs?: ReturnType<typeof attrStringToMap>\n      _content: string\n      _lang?: string\n    }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          _attrs: attrStringToMap(capture[3] || ''),\n          _content: capture[4],\n          _lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node._content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          _footnote: capture[2],\n          _identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          _content: capture[1],\n          _target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node._target)}>\n            <sup key={state._key}>{node._content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: string; _target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node._completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[2], state),\n          _id: options.slugify(capture[2]),\n          _level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        return h(\n          `h${node._level}`,\n          { id: node._id, key: state._key },\n          output(node._content, state)\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _id: string\n      _level: 1 | 2 | 3 | 4 | 5 | 6\n      _tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[1], state),\n          _level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _alt: capture[1],\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt || undefined}\n            title={node._title || undefined}\n            src={sanitizeUrl(node._target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _alt?: string\n      _target: string\n      _title?: string\n    }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseSimpleInline(parse, capture[1], state),\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node._target)}\n            title={node._title}\n          >\n            {output(node._content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _target: string\n      _title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          _title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          _content: [\n            {\n              _content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          _target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    orderedList: generateListRule(h, ORDERED),\n    unorderedList: generateListRule(h, UNORDERED),\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node._content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          _target: capture[2],\n          _title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          _alt: capture[1] || undefined,\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt}\n            src={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _alt?: string; _ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(capture[1], state),\n          _fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node._ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          >\n            {output(node._content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node._fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _fallbackContent: MarkdownToJSX.ParserResult\n      _ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node._header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node._cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node._content\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node._content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node._content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textMarked: {\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <mark key={state._key}>{output(node._content, state)}</mark>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node._content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          _attrs: attrStringToMap(capture[2]),\n          _content: content,\n          _noInnerParse: noInnerParse,\n          _tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node._tag key={state._key} {...node._attrs}>\n            {node._noInnerParse\n              ? (node._content as string)\n              : output(node._content as MarkdownToJSX.ParserResult, state)}\n          </node._tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _content: string | ReturnType<MarkdownToJSX.NestedParser>\n      _noInnerParse: Boolean\n      _tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _attrs: attrStringToMap(capture[2] || ''),\n          _tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node._tag {...node._attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def._identifier)} key={def._identifier}>\n                {def._identifier}\n                {emitter(parser(def._footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport default Markdown\n", "import baseUnset from './_baseUnset.js';\n\n/**\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n * _.unset(object, 'a[0].b.c');\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n *\n * _.unset(object, ['a', '0', 'b', 'c']);\n * // => true\n *\n * console.log(object);\n * // => { 'a': [{ 'b': {} }] };\n */\nfunction unset(object, path) {\n  return object == null ? true : baseUnset(object, path);\n}\n\nexport default unset;\n", "import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema, registry } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema, registry.globalUiOptions);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the copy button on an existing array element. Clones the row of\n   * keyed form data at the `index` into the next position in the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the copy button is clicked\n   */\n  onCopyIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      const { onChange } = this.props;\n      const { keyedFormData } = this.state;\n      const newKeyedFormDataRow: KeyedFormDataType<T> = {\n        key: generateRowId(),\n        item: cloneDeep(keyedFormData[index].item),\n      };\n      const newKeyedFormData = [...keyedFormData];\n      if (index !== undefined) {\n        newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);\n      } else {\n        newKeyedFormData.push(newKeyedFormDataRow);\n      }\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData))\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget, title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext, globalUiOptions } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={label}\n        hideLabel={!displayLabel}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const { widgets, formContext, globalUiOptions, schemaUtils } = registry;\n    const { widget = 'files', title: uiTitle, ...options } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    const label = uiTitle ?? schema.title ?? name;\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label={label}\n        hideLabel={!displayLabel}\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp: boolean;\n    canMoveDown: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp,\n      canMoveDown,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n      globalUiOptions,\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true, copyable = false } = getUiOptions<T[], S, F>(uiSchema, globalUiOptions);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      copy: copyable && canAdd,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasCopy: has.copy,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onCopyIndexClick: this.onCopyIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n", "import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString, globalUiOptions } = registry;\n  const {\n    widget = 'checkbox',\n    title: uiTitle,\n    // Unlike the other fields, don't use `getDisplayLabel()` since it always returns false for the boolean type\n    label: displayLabel = true,\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n  const label = uiTitle ?? title ?? name;\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n", "import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport {\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getUiOptions,\n  getWidget,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /* The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const {\n      schema,\n      registry: { schemaUtils },\n    } = this.props;\n\n    let discriminator: string | undefined;\n    const maybeString = get(schema, 'discriminator.propertyName', undefined);\n    if (isString(maybeString)) {\n      discriminator = maybeString;\n    } else if (maybeString !== undefined) {\n      console.warn(`Expecting discriminator to be a string, got \"${typeof maybeString}\" instead`);\n    }\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);\n    if (option > 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString, globalUiOptions, schemaUtils } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n    const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type ? option : Object.assign({}, option, { type: baseType });\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label={title ?? name}\n            hideLabel={!displayLabel}\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n", "import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n", "import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema, registry } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils, translateString, globalUiOptions } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = uiOptions.title ?? schema.title ?? name;\n    const description = uiOptions.description ?? schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            <Markdown>\n              {translateString(TranslatableString.InvalidObjectField, [name || 'root', (err as Error).message])}\n            </Markdown>\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`\n      title: uiOptions.label === false ? '' : title,\n      description: uiOptions.label === false ? undefined : description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      errorSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n", "import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils, globalUiOptions } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema, globalUiOptions);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${getSchemaType(schema)}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n", "import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils, globalUiOptions } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', title: uiTitle, ...options } = getUiOptions<T, S, F>(uiSchema);\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);\n  const label = uiTitle ?? title ?? name;\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={label}\n      hideLabel={!displayLabel}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n", "import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n", "import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n", "import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n", "import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    hasCopy,\n    index,\n    onCopyIndexClick,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasCopy && (\n              <CopyButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onCopyIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n", "import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n", "import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema, registry.globalUiOptions);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    hideLabel, // remove this from ...rest\n    hideError, // remove this from ...rest\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n", "import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className || ''}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n", "import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function CopyButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.CopyButton)}\n      className='array-item-copy'\n      {...props}\n      icon='copy'\n    />\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n", "import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { CopyButton, MoveDownButton, MoveUpButton, RemoveButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    CopyButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n", "import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n", "import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n", "const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n", "import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n", "import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n", "import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n", "import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {title && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n", "import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n", "import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n", "import { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [lastValue, setLastValue] = useState(value);\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    const stateValue = toDateString(state, time);\n    if (readyForChange(state) && stateValue !== value) {\n      // The user changed the date to a new valid data via the comboboxes, so call onChange\n      onChange(stateValue);\n    } else if (lastValue !== value) {\n      // We got a new value in the props\n      setLastValue(value);\n      setState(parseDateString(value, time));\n    }\n  }, [time, value, onChange, state, lastValue]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nextState = parseDateString(new Date().toJSON(), time);\n      onChange(toDateString(nextState, time));\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      onChange(undefined);\n    },\n    [disabled, readonly, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  labelValue,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  hideLabel,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n  const description = options.description ?? schema.description;\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {!hideLabel && !!description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        {labelValue(<span>{label}</span>, hideLabel)}\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n", "import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n", "import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n", "import { ChangeEvent, useCallback, useMemo, useState } from 'react';\nimport {\n  dataURItoBlob,\n  FormContextType,\n  getTemplate,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FileInfoPreview<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  fileInfo,\n  registry,\n}: {\n  fileInfo: FileInfoType;\n  registry: Registry<T, S, F>;\n}) {\n  const { translateString } = registry;\n  const { dataURL, type, name } = fileInfo;\n  if (!dataURL) {\n    return null;\n  }\n\n  if (type.indexOf('image') !== -1) {\n    return <img src={dataURL} style={{ maxWidth: '100%' }} className='file-preview' />;\n  }\n\n  return (\n    <>\n      {' '}\n      <a download={`preview-${name}`} href={dataURL} className='file-download'>\n        {translateString(TranslatableString.PreviewLabel)}\n      </a>\n    </>\n  );\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n  preview,\n}: {\n  filesInfo: FileInfoType[];\n  registry: Registry<T, S, F>;\n  preview?: boolean;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n            {preview && <FileInfoPreview<T, S, F> fileInfo={fileInfo} registry={registry} />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        dataURL,\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, required, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const extractedFilesInfo = useMemo(\n    () => (Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        required={value ? false : required} // this turns off HTML required validation when a value exists\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} preview={options.filePreview} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n", "import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={id}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n", "import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n", "import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n", "import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n", "import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TimeWidget` component uses the `BaseInputTemplate` changing the type to `time` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value ? `${value}:00` : undefined), [onChange]);\n\n  return <BaseInputTemplate type='time' {...props} onChange={handleChange} />;\n}\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n", "import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n", "import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport TimeWidget from './TimeWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    AltDateWidget,\n    AltDateTimeWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n    ColorWidget,\n    DateWidget,\n    DateTimeWidget,\n    EmailWidget,\n    FileWidget,\n    HiddenWidget,\n    PasswordWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    TextareaWidget,\n    TimeWidget,\n    UpDownWidget,\n    URLWidget,\n  };\n}\n\nexport default widgets;\n", "import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n", "import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  SUBMIT_BTN_OPTIONS_KEY,\n  TemplatesType,\n  toErrorList,\n  UiSchema,\n  UI_GLOBAL_OPTIONS_KEY,\n  UI_OPTIONS_KEY,\n  ValidationData,\n  validationDataMerge,\n  ValidatorType,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean | ((error: RJSFValidationError) => void);\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = validationDataMerge({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /**\n   * Callback function to handle reset form data.\n   * - Reset all fields with default values.\n   * - Reset validations and errors\n   *\n   */\n  reset = () => {\n    const { onChange } = this.props;\n    const newState = this.getStateFromProps(this.props, undefined);\n    const newFormData = newState.formData;\n    const state = {\n      formData: newFormData,\n      errorSchema: {},\n      errors: [] as unknown,\n      schemaValidationErrors: [] as unknown,\n      schemaValidationErrorSchema: {},\n    } as FormState<T, S, F>;\n\n    this.setState(state, () => onChange && onChange({ ...this.state, ...state }));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString, uiSchema = {} } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY],\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field.length) {\n      // If we got a list with length > 0\n      field = field[0];\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = validationDataMerge(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        if (typeof focusOnFirstError === 'function') {\n          focusOnFirstError(schemaValidation.errors[0]);\n        } else {\n          this.focusOnError(schemaValidation.errors[0]);\n        }\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    let { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions = {} } = getUiOptions<T, S, F>(uiSchema);\n    if (disabled) {\n      submitOptions = { ...submitOptions, props: { ...submitOptions.props, disabled: true } };\n    }\n    const submitUiSchema = { [UI_OPTIONS_KEY]: { [SUBMIT_BTN_OPTIONS_KEY]: submitOptions } };\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n\n        {children ? children : <SubmitButton uiSchema={submitUiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n", "import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],
  "mappings": "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",
  "names": ["ATTRIBUTE_TO_JSX_PROP_MAP", "reduce", "obj", "x", "toLowerCase", "for", "namedCodesToUnicode", "amp", "apos", "gt", "lt", "nbsp", "quot", "DO_NOT_PROCESS_HTML_ELEMENTS", "ATTR_EXTRACTOR_R", "AUTOLINK_MAILTO_CHECK_R", "BLOCK_END_R", "BLOCKQUOTE_R", "BLOCKQUOTE_TRIM_LEFT_MULTILINE_R", "BREAK_LINE_R", "BREAK_THEMATIC_R", "CODE_BLOCK_FENCED_R", "CODE_BLOCK_R", "CODE_INLINE_R", "CONSECUTIVE_NEWLINE_R", "CR_NEWLINE_R", "FOOTNOTE_R", "FOOTNOTE_REFERENCE_R", "FORMFEED_R", "GFM_TASK_R", "HEADING_R", "HEADING_SETEXT_R", "HTML_BLOCK_ELEMENT_R", "HTML_CHAR_CODE_R", "HTML_COMMENT_R", "HTML_CUSTOM_ATTR_R", "HTML_SELF_CLOSING_ELEMENT_R", "INTERPOLATION_R", "LINK_AUTOLINK_BARE_URL_R", "LINK_AUTOLINK_MAILTO_R", "LINK_AUTOLINK_R", "CAPTURE_LETTER_AFTER_HYPHEN", "NP_TABLE_R", "REFERENCE_IMAGE_OR_LINK", "REFERENCE_IMAGE_R", "REFERENCE_LINK_R", "SQUARE_BRACKETS_R", "SHOULD_RENDER_AS_BLOCK_R", "TAB_R", "TABLE_SEPARATOR_R", "TABLE_TRIM_PIPES", "TABLE_CELL_END_TRIM", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "TABLE_RIGHT_ALIGN", "TEXT_BOLD_R", "TEXT_EMPHASIZED_R", "TEXT_MARKED_R", "TEXT_STRIKETHROUGHED_R", "TEXT_ESCAPED_R", "TEXT_PLAIN_R", "TRIM_STARTING_NEWLINES", "HTML_LEFT_TRIM_AMOUNT_R", "UNESCAPE_URL_R", "LIST_ITEM_END_R", "LIST_LOOKBEHIND_R", "ORDERED_LIST_BULLET", "UNORDERED_LIST_BULLET", "generateListItemPrefix", "type", "ORDERED_LIST_ITEM_PREFIX", "UNORDERED_LIST_ITEM_PREFIX", "generateListItemPrefixRegex", "RegExp", "ORDERED_LIST_ITEM_PREFIX_R", "UNORDERED_LIST_ITEM_PREFIX_R", "generateListItemRegex", "ORDERED_LIST_ITEM_R", "UNORDERED_LIST_ITEM_R", "generateListRegex", "bullet", "ORDERED_LIST_R", "UNORDERED_LIST_R", "generateListRule", "h", "ordered", "LIST_R", "LIST_ITEM_R", "LIST_ITEM_PREFIX_R", "_match", "source", "state", "prevCapture", "isStartOfLine", "exec", "_list", "_inline", "_simple", "_order", "Priority", "HIGH", "_parse", "capture", "parse", "start", "items", "replace", "match", "lastItemWasAParagraph", "_items", "map", "item", "i", "space", "length", "spaceRegex", "content", "isLastItem", "thisItemIsAParagraph", "indexOf", "oldStateInline", "oldStateList", "adjustedContent", "result", "_ordered", "_start", "_react", "node", "output", "key", "_key", "LINK_R", "IMAGE_R", "NON_PARAGRAPH_BLOCK_SYNTAXES", "BLOCK_SYNTAXES", "slugify", "str", "parseTableAlignCapture", "alignCapture", "test", "parseTableRow", "prevInTable", "_inTable", "tableRow", "trim", "cells", "forEach", "push", "_content", "parseTable", "header", "align", "split", "rowText", "_align", "_cells", "_header", "getTableStyle", "colIndex", "textAlign", "inlineRegex", "regex", "simpleInlineRegex", "blockRegex", "anyScopeRegex", "matchParagraph", "prevCapturedString", "endsWith", "every", "line", "some", "captured", "trimEnd", "sanitizeUrl", "url", "decodeURIComponent", "e", "unescapeUrl", "rawUrlString", "parseInline", "isCurrentlyInline", "isCurrentlySimple", "parseSimpleInline", "parseBlock", "parseCaptureInline", "captureNothing", "renderNothing", "cx", "args", "filter", "Boolean", "join", "get", "src", "path", "fb", "ptr", "frags", "shift", "compiler", "markdown", "options", "overrides", "createElementFn", "createElement", "tag", "props", "children", "overrideProps", "override", "className", "undefined", "compile", "input", "forceInline", "forceBlock", "arr", "emitter", "parser", "pop", "wrapper", "jsx", "forceWrapper", "attrStringToMap", "attributes", "raw", "index", "delimiterIdx", "_", "letter", "toUpperCase", "slice", "value", "first", "mappedKey", "normalizedValue", "styles", "kvPair", "substr", "cloneElement", "footnotes", "refs", "rules", "blockQuote", "breakLine", "__", "breakThematic", "codeBlock", "MAX", "_lang", "_attrs", "codeFenced", "codeInline", "LOW", "footnote", "_footnote", "_identifier", "footnoteReference", "_target", "href", "gfmTask", "_completed", "checked", "readOnly", "heading", "_id", "_level", "id", "headingSetext", "htmlComment", "image", "_alt", "_title", "alt", "title", "link", "linkAngleBraceStyleDetector", "linkBareUrlDetector", "_inAnchor", "linkMailtoDetector", "address", "target", "orderedList", "unorderedList", "newlineCoalescer", "paragraph", "ref", "refImage", "_ref", "refLink", "_fallbackContent", "table", "style", "row", "c", "tableSeparator", "text", "MIN", "full", "inner", "textBolded", "MED", "textEmphasized", "textEscaped", "textMarked", "textStrikethroughed", "disableParsingRawHTML", "htmlBlock", "whitespace", "trimmer", "trimmed", "parseFunc", "r", "tagName", "noInnerParse", "_noInnerParse", "_tag", "htmlSelfClosing", "ruleList", "Object", "keys", "nestedParse", "ruleType", "rule", "currCaptureString", "substring", "parsed", "sort", "typeA", "typeB", "orderA", "orderB", "outputFunc", "ast", "nestedReactOutput", "Array", "isArray", "oldKey", "lastWasString", "nodeOut", "isString", "def", "generateRowId", "nanoid", "generateKeyedFormData", "formData", "Array", "isArray", "map", "item", "key", "keyedToPlainFormData", "keyedFormData", "keyedItem", "ArrayField", "_Component", "_inheritsLoose", "props", "_this", "call", "_getNewFormDataRow", "_this$props", "schema", "registry", "schemaUtils", "itemSchema", "items", "isFixedItems", "allowAdditionalItems", "additionalItems", "getDefaultFormState", "onAddClick", "event", "_handleAddClick", "onAddIndexClick", "index", "onCopyIndexClick", "preventDefault", "onChange", "state", "newKeyedFormDataRow", "cloneDeep", "newKeyedFormData", "concat", "undefined", "splice", "push", "setState", "updatedKeyedFormData", "onDropIndexClick", "_this$props2", "errorSchema", "newErrorSchema", "idx", "i", "parseInt", "set", "filter", "_", "onReorderClick", "newIndex", "currentTarget", "blur", "_this$props3", "reOrderArray", "_newKeyedFormData", "slice", "onChangeForIndex", "value", "id", "_extends2", "_this$props4", "arrayData", "newFormData", "jsonValue", "_extends", "onSelectChange", "_this$props5", "idSchema", "$id", "_props$formData", "getDerivedStateFromProps", "nextProps", "prevState", "nextFormData", "previousKeyedFormData", "length", "previousKeyedFormDatum", "_proto", "prototype", "isItemRequired", "type", "includes", "canAddItem", "formItems", "_this$props6", "uiSchema", "_getUiOptions", "getUiOptions", "globalUiOptions", "addable", "maxItems", "render", "_this$props7", "translateString", "ITEMS_KEY", "uiOptions", "UnsupportedFieldTemplate", "getTemplate", "_jsx", "reason", "TranslatableString", "MissingItems", "isMultiSelect", "renderMultiSelect", "isCustomWidget", "renderCustomWidget", "renderFixedArray", "isFilesArray", "renderFiles", "renderNormalArray", "_this2", "_this$props8", "_this$props8$uiSchema", "name", "_this$props8$disabled", "disabled", "_this$props8$readonly", "readonly", "_this$props8$autofocu", "autofocus", "_this$props8$required", "required", "onBlur", "onFocus", "idPrefix", "_this$props8$idSepara", "idSeparator", "rawErrors", "title", "formContext", "_schemaItems", "isObject", "itemsSchema", "retrieveSchema", "canAdd", "arrayProps", "itemCast", "itemErrorSchema", "itemIdPrefix", "itemIdSchema", "toIdSchema", "renderArrayFieldItem", "canMoveUp", "canMoveDown", "itemData", "itemUiSchema", "totalItems", "className", "Template", "_ref", "_this$props9", "_this$props9$disabled", "_this$props9$readonly", "_this$props9$autofocu", "_this$props9$required", "hideError", "placeholder", "_this$props9$formData", "widgets", "_getUiOptions2", "widget", "uiTitle", "options", "_objectWithoutPropertiesLoose", "_excluded", "Widget", "getWidget", "label", "displayLabel", "getDisplayLabel", "multiple", "hideLabel", "_ref2", "_this$props10", "_this$props10$formDat", "_this$props10$disable", "_this$props10$readonl", "_this$props10$autofoc", "_this$props10$require", "enumOptions", "optionsList", "_getUiOptions3", "_getUiOptions3$widget", "_excluded2", "_ref3", "_this$props11", "_this$props11$disable", "_this$props11$readonl", "_this$props11$autofoc", "_this$props11$require", "_this$props11$formDat", "_getUiOptions4", "_getUiOptions4$widget", "_excluded3", "_this3", "_this$props12", "_this$props12$uiSchem", "_this$props12$formDat", "_this$props12$idSepar", "_this$props12$disable", "_this$props12$readonl", "_this$props12$autofoc", "_this$props12$require", "_this$props$formData", "itemSchemas", "additionalSchema", "additional", "canRemove", "_props$canRemove", "_this$props13", "_registry$fields", "fields", "ArraySchemaField", "SchemaField", "ItemSchemaField", "_getUiOptions5", "_getUiOptions5$ordera", "orderable", "_getUiOptions5$remova", "removable", "_getUiOptions5$copyab", "copyable", "has", "moveUp", "moveDown", "copy", "remove", "toolbar", "Object", "keys", "some", "children", "hasCopy", "hasToolbar", "hasMoveUp", "hasMoveDown", "hasRemove", "_createClass", "get", "_this$props14", "ArrayItemTitle", "Component", "BooleanField", "_getUiOptions$widget", "_getUiOptions$label", "yes", "YesLabel", "no", "NoLabel", "oneOf", "option", "o", "_schema$enum", "schemaWithEnumNames", "enums", "enumNames", "every", "v", "AnyOfField", "onOptionChange", "_this$state", "selectedOption", "retrievedOptions", "intOption", "newOption", "oldOption", "sanitizeDataForNewSchema", "getFieldId", "opt", "getMatchingOption", "componentDidUpdate", "prevProps", "newState", "deepEquals", "_newState", "matchingOption", "discriminator", "maybeString", "isString", "console", "warn", "getClosestMatchingOption", "baseType", "_this$props6$disabled", "_this$props6$errorSch", "_SchemaField", "_this$state2", "autocomplete", "_getUiOptions$title", "ERRORS_KEY", "fieldErrorSchema", "omit", "optionSchema", "assign", "translateEnum", "TitleOptionPrefix", "OptionPrefix", "translateParams", "String", "_jsxs", "isEmpty", "trailingCharMatcherWithPrefix", "trailingCharMatcher", "NumberField", "initialValue", "_useState", "useState", "lastValue", "setLastValue", "StringField", "handleChange", "useCallback", "charAt", "processed", "match", "asNumber", "replace", "re", "RegExp", "ObjectField", "_len", "arguments", "args", "_key", "apply", "wasPropertyKeyModified", "additionalProperties", "onPropertyChange", "addedByAdditionalProperties", "_extends3", "onDropPropertyClick", "copiedFormData", "unset", "getAvailableKey", "preferredKey", "_getUiOptions$duplica", "duplicateKeySuffixSeparator", "newKey", "onKeyChange", "oldValue", "_newKeys", "_extends4", "newKeys", "keyValues", "renamedObj", "handleAddClick", "apSchema", "REF_KEY", "$ref", "ANY_OF_KEY", "ONE_OF_KEY", "getDefaultValue", "isRequired", "indexOf", "NewStringDefault", "_uiOptions$title", "_uiOptions$descriptio", "rawSchema", "_this$props6$uiSchema", "_this$props6$required", "_this$props6$readonly", "_schema$properties", "properties", "schemaProperties", "description", "orderedProperties", "orderProperties", "order", "err", "style", "color", "Markdown", "InvalidObjectField", "message", "JSON", "stringify", "templateProps", "PROPERTIES_KEY", "ADDITIONAL_PROPERTY_FLAG", "fieldUiSchema", "hidden", "fieldIdSchema", "content", "COMPONENT_TYPES", "array", "integer", "number", "object", "string", "getFieldComponent", "field", "schemaType", "getSchemaType", "componentName", "anyOf", "UnknownFieldType", "SchemaFieldRender", "_schema", "_idSchema", "_props$wasPropertyKey", "FieldTemplate", "DescriptionFieldTemplate", "FieldHelpTemplate", "FieldErrorTemplate", "fieldId", "ID_KEY", "mergeObjects", "handleFieldComponentChange", "theId", "FieldComponent", "Boolean", "readOnly", "uiSchemaHideError", "__errors", "UI_OPTIONS_KEY", "help", "classNames", "process", "helpComponent", "hasErrors", "errorsComponent", "errors", "fieldProps", "descriptionId", "rawDescription", "rawHelp", "join", "trim", "_AnyOfField", "_OneOfField", "OneOfField", "isReplacingAnyOrOneOf", "_Fragment", "isSelect", "shouldComponentUpdate", "_props$disabled", "_props$readonly", "_props$autofocus", "format", "defaultWidget", "hasWidget", "_getUiOptions$placeho", "NullField", "useEffect", "MultiSchemaField", "ArrayFieldDescriptionTemplate", "_options$label", "ArrayFieldItemTemplate", "_registry$templates$B", "templates", "ButtonTemplates", "CopyButton", "MoveDownButton", "MoveUpButton", "RemoveButton", "btnStyle", "flex", "paddingLeft", "paddingRight", "fontWeight", "display", "justifyContent", "onClick", "ArrayFieldTemplate", "ArrayFieldTitleTemplate", "AddButton", "itemProps", "TitleFieldTemplate", "titleId", "BaseInputTemplate", "onChangeOverride", "rest", "log", "Error", "inputProps", "getInputProps", "inputValue", "_onChange", "target", "emptyValue", "_onBlur", "_onFocus", "autoFocus", "list", "examples", "examplesId", "ariaDescribedByIds", "example", "SubmitButton", "_getSubmitButtonOptio", "getSubmitButtonOptions", "submitText", "norender", "_getSubmitButtonOptio2", "submitButtonProps", "IconButton", "_props$iconType", "iconType", "icon", "otherProps", "buttonTemplates", "DescriptionField", "ErrorList", "ErrorsLabel", "error", "stack", "REQUIRED_FIELD_SYMBOL", "Label", "htmlFor", "WrapIfAdditionalTemplate", "_props$errors", "errorId", "elem", "helpId", "ObjectFieldTemplate", "prop", "canExpand", "TitleField", "UnsupportedField", "UnsupportedFieldWithId", "UnsupportedFieldWithReason", "UnsupportedFieldWithIdAndReason", "keyLabel", "KeyLabel", "defaultValue", "border", "ErrorListTemplate", "rangeOptions", "start", "stop", "pad", "readyForChange", "values", "dateElementProps", "time", "yearsRange", "Date", "getFullYear", "year", "month", "day", "hour", "minute", "second", "data", "range", "DateElement", "select", "rootId", "SelectWidget", "AltDateWidget", "_ref2$time", "_ref2$disabled", "_ref2$readonly", "_ref2$autofocus", "_useReducer", "useReducer", "action", "parseDateString", "stateValue", "toDateString", "property", "_setState", "handleSetNow", "nextState", "toJSON", "handleClear", "elemProps", "hideNowButton", "href", "NowLabel", "hideClearButton", "ClearLabel", "AltDateTimeWidget", "_ref$time", "CheckboxWidget", "_options$description", "_ref$autofocus", "schemaRequiresTrueValue", "checked", "handleBlur", "handleFocus", "labelValue", "CheckboxesWidget", "_ref$options", "_ref$options$inline", "inline", "enumDisabled", "checkboxesValues", "enumOptionsValueForIndex", "enumOptionsIsSelected", "itemDisabled", "disabledCls", "enumOptionsSelectValue", "enumOptionsDeselectValue", "checkbox", "optionId", "ColorWidget", "DateWidget", "DateTimeWidget", "utcToLocal", "localToUTC", "EmailWidget", "addNameToDataURL", "dataURL", "encodeURIComponent", "processFile", "file", "size", "Promise", "resolve", "reject", "reader", "window", "FileReader", "onerror", "onload", "_event$target", "result", "readAsDataURL", "processFiles", "files", "all", "from", "FileInfoPreview", "fileInfo", "src", "maxWidth", "download", "PreviewLabel", "FilesInfo", "filesInfo", "preview", "extractFileInfo", "dataURLs", "_dataURItoBlob", "dataURItoBlob", "blob", "FileWidget", "extractedFilesInfo", "useMemo", "setFilesInfo", "then", "filesInfoEvent", "newValue", "accept", "filePreview", "HiddenWidget", "PasswordWidget", "RadioWidget", "radio", "RangeWidget", "getValue", "selected", "_ref$multiple", "optEmptyVal", "selectedIndexes", "enumOptionsIndexForValue", "TextareaWidget", "_ref4", "rows", "defaultProps", "TextWidget", "TimeWidget", "URLWidget", "UpDownWidget", "getDefaultRegistry", "rootSchema", "englishStringTranslator", "Form", "formElement", "getUsedFormData", "_pick", "getFieldNames", "pathSchema", "getAllPaths", "_obj", "acc", "paths", "forEach", "newPaths", "path", "RJSF_ADDITONAL_PROPERTIES_FLAG", "NAME_KEY", "formValue", "_get", "_isEmpty", "extraErrors", "omitExtraData", "liveOmit", "noValidate", "liveValidate", "getStateFromProps", "mustValidate", "retrievedSchema", "toPathSchema", "fieldNames", "schemaValidation", "validate", "schemaValidationErrors", "schemaValidationErrorSchema", "merged", "validationDataMerge", "toErrorList", "reset", "onSubmit", "persist", "validateForm", "status", "validator", "createRef", "UNSAFE_componentWillReceiveProps", "inputFormData", "edit", "doesSchemaUtilsDiffer", "createSchemaUtils", "getCurrentErrors", "currentErrors", "shouldRender", "altSchemaUtils", "customValidate", "transformErrors", "resolvedSchema", "getValidator", "validateFormData", "renderErrors", "_this$state3", "getRegistry", "_this$props$templates", "customTranslateString", "_this$props4$uiSchema", "_getDefaultRegistry", "UI_GLOBAL_OPTIONS_KEY", "submit", "current", "dispatchEvent", "CustomEvent", "cancelable", "requestSubmit", "focusOnError", "_this$props5$idPrefix", "_this$props5$idSepara", "_toPath", "unshift", "elementId", "elements", "querySelector", "focus", "focusOnFirstError", "onError", "_UI_OPTIONS_KEY", "_submitUiSchema", "_this$props7$classNam", "tagName", "method", "autoComplete", "enctype", "acceptcharset", "_this$props7$noHtml5V", "noHtml5Validate", "_this$props7$disabled", "_this$props7$readonly", "_this$props7$showErro", "showErrorList", "_internalFormWrapper", "_this$state4", "as", "FormTag", "_getUiOptions$SUBMIT_", "SUBMIT_BTN_OPTIONS_KEY", "submitOptions", "submitUiSchema", "encType", "acceptCharset", "ref", "withTheme", "themeProps", "forwardRef", "_themeProps$templates", "_templates", "directProps"]
}
