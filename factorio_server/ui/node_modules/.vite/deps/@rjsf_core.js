import {
  ADDITIONAL_PROPERTY_FLAG,
  ANY_OF_KEY,
  ERRORS_KEY,
  ID_KEY,
  ITEMS_KEY,
  NAME_KEY,
  ONE_OF_KEY,
  PROPERTIES_KEY,
  REF_KEY,
  RJSF_ADDITONAL_PROPERTIES_FLAG,
  SUBMIT_BTN_OPTIONS_KEY,
  TranslatableString,
  UI_GLOBAL_OPTIONS_KEY,
  UI_OPTIONS_KEY,
  allowAdditionalItems,
  ariaDescribedByIds,
  asNumber,
  baseGet_default,
  baseSet_default,
  baseUnset_default,
  canExpand,
  castPath_default,
  cloneDeep_default,
  createSchemaUtils,
  dataURItoBlob,
  deepEquals,
  descriptionId,
  englishStringTranslator,
  enumOptionsDeselectValue,
  enumOptionsIndexForValue,
  enumOptionsIsSelected,
  enumOptionsSelectValue,
  enumOptionsValueForIndex,
  errorId,
  examplesId,
  flatRest_default,
  getInputProps,
  getSchemaType,
  getSubmitButtonOptions,
  getTemplate,
  getUiOptions,
  getWidget,
  get_default,
  hasIn_default,
  hasWidget,
  has_default,
  helpId,
  isCustomWidget,
  isEmpty_default,
  isFixedItems,
  isObject,
  isObject_default,
  isString_default,
  labelValue,
  localToUTC,
  mergeObjects,
  omit_default,
  optionId,
  optionsList,
  orderProperties,
  pad,
  parseDateString,
  require_jsx_runtime,
  schemaRequiresTrueValue,
  set_default,
  shouldRender,
  titleId,
  toDateString,
  toErrorList,
  toPath_default,
  utcToLocal,
  validationDataMerge
} from "./chunk-SNBO7GDO.js";
import {
  __toESM,
  require_react
} from "./chunk-OMFGQDFA.js";

// node_modules/@rjsf/core/dist/core.esm.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());

// node_modules/lodash-es/_basePickBy.js
function basePickBy(object, paths, predicate) {
  var index = -1, length = paths.length, result = {};
  while (++index < length) {
    var path = paths[index], value = baseGet_default(object, path);
    if (predicate(value, path)) {
      baseSet_default(result, castPath_default(path, object), value);
    }
  }
  return result;
}
var basePickBy_default = basePickBy;

// node_modules/lodash-es/_basePick.js
function basePick(object, paths) {
  return basePickBy_default(object, paths, function(value, path) {
    return hasIn_default(object, path);
  });
}
var basePick_default = basePick;

// node_modules/lodash-es/pick.js
var pick = flatRest_default(function(object, paths) {
  return object == null ? {} : basePick_default(object, paths);
});
var pick_default = pick;

// node_modules/nanoid/index.browser.js
var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/markdown-to-jsx/dist/index.modern.js
var t = __toESM(require_react());
function n() {
  return n = Object.assign || function(t2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var e2 = arguments[n2];
      for (var r2 in e2)
        Object.prototype.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
    }
    return t2;
  }, n.apply(this, arguments);
}
var e = ["children", "options"];
var r = ["allowFullScreen", "allowTransparency", "autoComplete", "autoFocus", "autoPlay", "cellPadding", "cellSpacing", "charSet", "className", "classId", "colSpan", "contentEditable", "contextMenu", "crossOrigin", "encType", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "hrefLang", "inputMode", "keyParams", "keyType", "marginHeight", "marginWidth", "maxLength", "mediaGroup", "minLength", "noValidate", "radioGroup", "readOnly", "rowSpan", "spellCheck", "srcDoc", "srcLang", "srcSet", "tabIndex", "useMap"].reduce((t2, n2) => (t2[n2.toLowerCase()] = n2, t2), { for: "htmlFor" });
var o = { amp: "&", apos: "'", gt: ">", lt: "<", nbsp: " ", quot: "“" };
var c = ["style", "script"];
var a = /([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi;
var _ = /mailto:/i;
var u = /\n{2,}$/;
var i = /^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/;
var l = /^ *> ?/gm;
var s = /^ {2,}\n/;
var f = /^(?:( *[-*_])){3,} *(?:\n *)+\n/;
var d = /^\s*(`{3,}|~{3,}) *(\S+)?([^\n]*?)?\n([\s\S]+?)\s*\1 *(?:\n *)*\n?/;
var p = /^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/;
var m = /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/;
var g = /^(?:\n *)*\n/;
var y = /\r\n?/g;
var h = /^\[\^([^\]]+)](:.*)\n/;
var k = /^\[\^([^\]]+)]/;
var x = /\f/g;
var b = /^\s*?\[(x|\s)\]/;
var v = /^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/;
var $ = /^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/;
var S = /^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?([^>]*)\/{0}>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1)[\s\S])*?)<\/\1>\n*/i;
var z = /&([a-zA-Z]+);/g;
var w = /^<!--[\s\S]*?(?:-->)/;
var A = /^(data|aria|x)-[a-z_][a-z\d_.-]*$/;
var E = /^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i;
var L = /^\{.*\}$/;
var M = /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/;
var I = /^<([^ >]+@[^ >]+)>/;
var O = /^<([^ >]+:\/[^ >]+)>/;
var B = /-([a-z])?/gi;
var R = /^(.*\|?.*)\n *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*)\n?/;
var T = /^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/;
var j = /^!\[([^\]]*)\] ?\[([^\]]*)\]/;
var C = /^\[([^\]]*)\] ?\[([^\]]*)\]/;
var D = /(\[|\])/g;
var N = /(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/;
var Z = /\t/g;
var F = /^ *\| */;
var P = /(^ *\||\| *$)/g;
var G = / *$/;
var H = /^ *:-+: *$/;
var q = /^ *:-+ *$/;
var U = /^ *-+: *$/;
var V = /^([*_])\1((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1\1(?!\1)/;
var W = /^([*_])((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1(?!\1|\w)/;
var Q = /^==((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/;
var X = /^~~((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/;
var J = /^\\([^0-9A-Za-z\s])/;
var K = /^[\s\S]+?(?=[^0-9A-Z\s\u00c0-\uffff&;.()'"]|\d+\.|\n\n| {2,}\n|\w+:\S|$)/i;
var Y = /^\n+/;
var tt = /^([ \t]*)/;
var nt = /\\([^\\])/g;
var et = / *\n+$/;
var rt = /(?:^|\n)( *)$/;
var ot = "(?:\\d+\\.)";
var ct = "(?:[*+-])";
function at(t2) {
  return "( *)(" + (1 === t2 ? ot : ct) + ") +";
}
var _t = at(1);
var ut = at(2);
function it(t2) {
  return new RegExp("^" + (1 === t2 ? _t : ut));
}
var lt = it(1);
var st = it(2);
function ft(t2) {
  return new RegExp("^" + (1 === t2 ? _t : ut) + "[^\\n]*(?:\\n(?!\\1" + (1 === t2 ? ot : ct) + " )[^\\n]*)*(\\n|$)", "gm");
}
var dt = ft(1);
var pt = ft(2);
function mt(t2) {
  const n2 = 1 === t2 ? ot : ct;
  return new RegExp("^( *)(" + n2 + ") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1" + n2 + " (?!" + n2 + " ))\\n*|\\s*\\n*$)");
}
var gt = mt(1);
var yt = mt(2);
function ht(t2, n2) {
  const e2 = 1 === n2, r2 = e2 ? gt : yt, o2 = e2 ? dt : pt, c2 = e2 ? lt : st;
  return { t(t3, n3, e3) {
    const o3 = rt.exec(e3);
    return o3 && (n3.o || !n3._ && !n3.u) ? r2.exec(t3 = o3[1] + t3) : null;
  }, i: Gt.HIGH, l(t3, n3, r3) {
    const a2 = e2 ? +t3[2] : void 0, _2 = t3[0].replace(u, "\n").match(o2);
    let i2 = false;
    return { p: _2.map(function(t4, e3) {
      const o3 = c2.exec(t4)[0].length, a3 = new RegExp("^ {1," + o3 + "}", "gm"), u2 = t4.replace(a3, "").replace(c2, ""), l2 = e3 === _2.length - 1, s2 = -1 !== u2.indexOf("\n\n") || l2 && i2;
      i2 = s2;
      const f2 = r3._, d2 = r3.o;
      let p2;
      r3.o = true, s2 ? (r3._ = false, p2 = u2.replace(et, "\n\n")) : (r3._ = true, p2 = u2.replace(et, ""));
      const m2 = n3(p2, r3);
      return r3._ = f2, r3.o = d2, m2;
    }), m: e2, g: a2 };
  }, h: (n3, e3, r3) => t2(n3.m ? "ol" : "ul", { key: r3.k, start: n3.g }, n3.p.map(function(n4, o3) {
    return t2("li", { key: o3 }, e3(n4, r3));
  })) };
}
var kt = /^\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/;
var xt = /^!\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/;
var bt = [i, d, p, v, $, w, R, dt, gt, pt, yt];
var vt = [...bt, /^[^\n]+(?:  \n|\n{2,})/, S, E];
function $t(t2) {
  return t2.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, "a").replace(/[çÇ]/g, "c").replace(/[ðÐ]/g, "d").replace(/[ÈÉÊËéèêë]/g, "e").replace(/[ÏïÎîÍíÌì]/g, "i").replace(/[Ññ]/g, "n").replace(/[øØœŒÕõÔôÓóÒò]/g, "o").replace(/[ÜüÛûÚúÙù]/g, "u").replace(/[ŸÿÝý]/g, "y").replace(/[^a-z0-9- ]/gi, "").replace(/ /gi, "-").toLowerCase();
}
function St(t2) {
  return U.test(t2) ? "right" : H.test(t2) ? "center" : q.test(t2) ? "left" : null;
}
function zt(t2, n2, e2) {
  const r2 = e2.v;
  e2.v = true;
  const o2 = n2(t2.trim(), e2);
  e2.v = r2;
  let c2 = [[]];
  return o2.forEach(function(t3, n3) {
    "tableSeparator" === t3.type ? 0 !== n3 && n3 !== o2.length - 1 && c2.push([]) : ("text" !== t3.type || null != o2[n3 + 1] && "tableSeparator" !== o2[n3 + 1].type || (t3.$ = t3.$.replace(G, "")), c2[c2.length - 1].push(t3));
  }), c2;
}
function wt(t2, n2, e2) {
  e2._ = true;
  const r2 = zt(t2[1], n2, e2), o2 = t2[2].replace(P, "").split("|").map(St), c2 = function(t3, n3, e3) {
    return t3.trim().split("\n").map(function(t4) {
      return zt(t4, n3, e3);
    });
  }(t2[3], n2, e2);
  return e2._ = false, { S: o2, A: c2, L: r2, type: "table" };
}
function At(t2, n2) {
  return null == t2.S[n2] ? {} : { textAlign: t2.S[n2] };
}
function Et(t2) {
  return function(n2, e2) {
    return e2._ ? t2.exec(n2) : null;
  };
}
function Lt(t2) {
  return function(n2, e2) {
    return e2._ || e2.u ? t2.exec(n2) : null;
  };
}
function Mt(t2) {
  return function(n2, e2) {
    return e2._ || e2.u ? null : t2.exec(n2);
  };
}
function It(t2) {
  return function(n2) {
    return t2.exec(n2);
  };
}
function Ot(t2, n2, e2) {
  if (n2._ || n2.u)
    return null;
  if (e2 && !e2.endsWith("\n"))
    return null;
  let r2 = "";
  t2.split("\n").every((t3) => !bt.some((n3) => n3.test(t3)) && (r2 += t3 + "\n", t3.trim()));
  const o2 = r2.trimEnd();
  return "" == o2 ? null : [r2, o2];
}
function Bt(t2) {
  try {
    if (decodeURIComponent(t2).replace(/[^A-Za-z0-9/:]/g, "").match(/^\s*(javascript|vbscript|data(?!:image)):/i))
      return null;
  } catch (t3) {
    return null;
  }
  return t2;
}
function Rt(t2) {
  return t2.replace(nt, "$1");
}
function Tt(t2, n2, e2) {
  const r2 = e2._ || false, o2 = e2.u || false;
  e2._ = true, e2.u = true;
  const c2 = t2(n2, e2);
  return e2._ = r2, e2.u = o2, c2;
}
function jt(t2, n2, e2) {
  const r2 = e2._ || false, o2 = e2.u || false;
  e2._ = false, e2.u = true;
  const c2 = t2(n2, e2);
  return e2._ = r2, e2.u = o2, c2;
}
function Ct(t2, n2, e2) {
  return e2._ = false, t2(n2 + "\n\n", e2);
}
var Dt = (t2, n2, e2) => ({ $: Tt(n2, t2[1], e2) });
function Nt() {
  return {};
}
function Zt() {
  return null;
}
function Ft(...t2) {
  return t2.filter(Boolean).join(" ");
}
function Pt(t2, n2, e2) {
  let r2 = t2;
  const o2 = n2.split(".");
  for (; o2.length && (r2 = r2[o2[0]], void 0 !== r2); )
    o2.shift();
  return r2 || e2;
}
var Gt;
function Ht(e2, u2 = {}) {
  u2.overrides = u2.overrides || {}, u2.slugify = u2.slugify || $t, u2.namedCodesToUnicode = u2.namedCodesToUnicode ? n({}, o, u2.namedCodesToUnicode) : o;
  const P2 = u2.createElement || t.createElement;
  function G2(t2, e3, ...r2) {
    const o2 = Pt(u2.overrides, `${t2}.props`, {});
    return P2(function(t3, n2) {
      const e4 = Pt(n2, t3);
      return e4 ? "function" == typeof e4 || "object" == typeof e4 && "render" in e4 ? e4 : Pt(n2, `${t3}.component`, t3) : t3;
    }(t2, u2.overrides), n({}, e3, o2, { className: Ft(null == e3 ? void 0 : e3.className, o2.className) || void 0 }), ...r2);
  }
  function H2(n2) {
    let e3 = false;
    u2.forceInline ? e3 = true : u2.forceBlock || (e3 = false === N.test(n2));
    const r2 = ot2(rt2(e3 ? n2 : `${n2.trimEnd().replace(Y, "")}

`, { _: e3 }));
    for (; "string" == typeof r2[r2.length - 1] && !r2[r2.length - 1].trim(); )
      r2.pop();
    if (null === u2.wrapper)
      return r2;
    const o2 = u2.wrapper || (e3 ? "span" : "div");
    let c2;
    if (r2.length > 1 || u2.forceWrapper)
      c2 = r2;
    else {
      if (1 === r2.length)
        return c2 = r2[0], "string" == typeof c2 ? G2("span", { key: "outer" }, c2) : c2;
      c2 = null;
    }
    return t.createElement(o2, { key: "outer" }, c2);
  }
  function q2(n2) {
    const e3 = n2.match(a);
    return e3 ? e3.reduce(function(n3, e4, o2) {
      const c2 = e4.indexOf("=");
      if (-1 !== c2) {
        const a2 = function(t2) {
          return -1 !== t2.indexOf("-") && null === t2.match(A) && (t2 = t2.replace(B, function(t3, n4) {
            return n4.toUpperCase();
          })), t2;
        }(e4.slice(0, c2)).trim(), _2 = function(t2) {
          const n4 = t2[0];
          return ('"' === n4 || "'" === n4) && t2.length >= 2 && t2[t2.length - 1] === n4 ? t2.slice(1, -1) : t2;
        }(e4.slice(c2 + 1).trim()), u3 = r[a2] || a2, i2 = n3[u3] = function(t2, n4) {
          return "style" === t2 ? n4.split(/;\s?/).reduce(function(t3, n5) {
            const e5 = n5.slice(0, n5.indexOf(":"));
            return t3[e5.replace(/(-[a-z])/g, (t4) => t4[1].toUpperCase())] = n5.slice(e5.length + 1).trim(), t3;
          }, {}) : "href" === t2 ? Bt(n4) : (n4.match(L) && (n4 = n4.slice(1, n4.length - 1)), "true" === n4 || "false" !== n4 && n4);
        }(a2, _2);
        "string" == typeof i2 && (S.test(i2) || E.test(i2)) && (n3[u3] = t.cloneElement(H2(i2.trim()), { key: o2 }));
      } else
        "style" !== e4 && (n3[r[e4] || e4] = true);
      return n3;
    }, {}) : null;
  }
  const U2 = [], nt2 = {}, et2 = { blockQuote: { t: Mt(i), i: Gt.HIGH, l: (t2, n2, e3) => ({ $: n2(t2[0].replace(l, ""), e3) }), h: (t2, n2, e3) => G2("blockquote", { key: e3.k }, n2(t2.$, e3)) }, breakLine: { t: It(s), i: Gt.HIGH, l: Nt, h: (t2, n2, e3) => G2("br", { key: e3.k }) }, breakThematic: { t: Mt(f), i: Gt.HIGH, l: Nt, h: (t2, n2, e3) => G2("hr", { key: e3.k }) }, codeBlock: { t: Mt(p), i: Gt.MAX, l: (t2) => ({ $: t2[0].replace(/^ {4}/gm, "").replace(/\n+$/, ""), M: void 0 }), h: (t2, e3, r2) => G2("pre", { key: r2.k }, G2("code", n({}, t2.I, { className: t2.M ? `lang-${t2.M}` : "" }), t2.$)) }, codeFenced: { t: Mt(d), i: Gt.MAX, l: (t2) => ({ I: q2(t2[3] || ""), $: t2[4], M: t2[2] || void 0, type: "codeBlock" }) }, codeInline: { t: Lt(m), i: Gt.LOW, l: (t2) => ({ $: t2[2] }), h: (t2, n2, e3) => G2("code", { key: e3.k }, t2.$) }, footnote: { t: Mt(h), i: Gt.MAX, l: (t2) => (U2.push({ O: t2[2], B: t2[1] }), {}), h: Zt }, footnoteReference: { t: Et(k), i: Gt.HIGH, l: (t2) => ({ $: t2[1], R: `#${u2.slugify(t2[1])}` }), h: (t2, n2, e3) => G2("a", { key: e3.k, href: Bt(t2.R) }, G2("sup", { key: e3.k }, t2.$)) }, gfmTask: { t: Et(b), i: Gt.HIGH, l: (t2) => ({ T: "x" === t2[1].toLowerCase() }), h: (t2, n2, e3) => G2("input", { checked: t2.T, key: e3.k, readOnly: true, type: "checkbox" }) }, heading: { t: Mt(v), i: Gt.HIGH, l: (t2, n2, e3) => ({ $: Tt(n2, t2[2], e3), j: u2.slugify(t2[2]), C: t2[1].length }), h: (t2, n2, e3) => G2(`h${t2.C}`, { id: t2.j, key: e3.k }, n2(t2.$, e3)) }, headingSetext: { t: Mt($), i: Gt.MAX, l: (t2, n2, e3) => ({ $: Tt(n2, t2[1], e3), C: "=" === t2[2] ? 1 : 2, type: "heading" }) }, htmlComment: { t: It(w), i: Gt.HIGH, l: () => ({}), h: Zt }, image: { t: Lt(xt), i: Gt.HIGH, l: (t2) => ({ D: t2[1], R: Rt(t2[2]), N: t2[3] }), h: (t2, n2, e3) => G2("img", { key: e3.k, alt: t2.D || void 0, title: t2.N || void 0, src: Bt(t2.R) }) }, link: { t: Et(kt), i: Gt.LOW, l: (t2, n2, e3) => ({ $: jt(n2, t2[1], e3), R: Rt(t2[2]), N: t2[3] }), h: (t2, n2, e3) => G2("a", { key: e3.k, href: Bt(t2.R), title: t2.N }, n2(t2.$, e3)) }, linkAngleBraceStyleDetector: { t: Et(O), i: Gt.MAX, l: (t2) => ({ $: [{ $: t2[1], type: "text" }], R: t2[1], type: "link" }) }, linkBareUrlDetector: { t: (t2, n2) => n2.Z ? null : Et(M)(t2, n2), i: Gt.MAX, l: (t2) => ({ $: [{ $: t2[1], type: "text" }], R: t2[1], N: void 0, type: "link" }) }, linkMailtoDetector: { t: Et(I), i: Gt.MAX, l(t2) {
    let n2 = t2[1], e3 = t2[1];
    return _.test(e3) || (e3 = "mailto:" + e3), { $: [{ $: n2.replace("mailto:", ""), type: "text" }], R: e3, type: "link" };
  } }, orderedList: ht(G2, 1), unorderedList: ht(G2, 2), newlineCoalescer: { t: Mt(g), i: Gt.LOW, l: Nt, h: () => "\n" }, paragraph: { t: Ot, i: Gt.LOW, l: Dt, h: (t2, n2, e3) => G2("p", { key: e3.k }, n2(t2.$, e3)) }, ref: { t: Et(T), i: Gt.MAX, l: (t2) => (nt2[t2[1]] = { R: t2[2], N: t2[4] }, {}), h: Zt }, refImage: { t: Lt(j), i: Gt.MAX, l: (t2) => ({ D: t2[1] || void 0, F: t2[2] }), h: (t2, n2, e3) => G2("img", { key: e3.k, alt: t2.D, src: Bt(nt2[t2.F].R), title: nt2[t2.F].N }) }, refLink: { t: Et(C), i: Gt.MAX, l: (t2, n2, e3) => ({ $: n2(t2[1], e3), P: n2(t2[0].replace(D, "\\$1"), e3), F: t2[2] }), h: (t2, n2, e3) => nt2[t2.F] ? G2("a", { key: e3.k, href: Bt(nt2[t2.F].R), title: nt2[t2.F].N }, n2(t2.$, e3)) : G2("span", { key: e3.k }, n2(t2.P, e3)) }, table: { t: Mt(R), i: Gt.HIGH, l: wt, h: (t2, n2, e3) => G2("table", { key: e3.k }, G2("thead", null, G2("tr", null, t2.L.map(function(r2, o2) {
    return G2("th", { key: o2, style: At(t2, o2) }, n2(r2, e3));
  }))), G2("tbody", null, t2.A.map(function(r2, o2) {
    return G2("tr", { key: o2 }, r2.map(function(r3, o3) {
      return G2("td", { key: o3, style: At(t2, o3) }, n2(r3, e3));
    }));
  }))) }, tableSeparator: { t: function(t2, n2) {
    return n2.v ? F.exec(t2) : null;
  }, i: Gt.HIGH, l: function() {
    return { type: "tableSeparator" };
  }, h: () => " | " }, text: { t: It(K), i: Gt.MIN, l: (t2) => ({ $: t2[0].replace(z, (t3, n2) => u2.namedCodesToUnicode[n2] ? u2.namedCodesToUnicode[n2] : t3) }), h: (t2) => t2.$ }, textBolded: { t: Lt(V), i: Gt.MED, l: (t2, n2, e3) => ({ $: n2(t2[2], e3) }), h: (t2, n2, e3) => G2("strong", { key: e3.k }, n2(t2.$, e3)) }, textEmphasized: { t: Lt(W), i: Gt.LOW, l: (t2, n2, e3) => ({ $: n2(t2[2], e3) }), h: (t2, n2, e3) => G2("em", { key: e3.k }, n2(t2.$, e3)) }, textEscaped: { t: Lt(J), i: Gt.HIGH, l: (t2) => ({ $: t2[1], type: "text" }) }, textMarked: { t: Lt(Q), i: Gt.LOW, l: Dt, h: (t2, n2, e3) => G2("mark", { key: e3.k }, n2(t2.$, e3)) }, textStrikethroughed: { t: Lt(X), i: Gt.LOW, l: Dt, h: (t2, n2, e3) => G2("del", { key: e3.k }, n2(t2.$, e3)) } };
  true !== u2.disableParsingRawHTML && (et2.htmlBlock = { t: It(S), i: Gt.HIGH, l(t2, n2, e3) {
    const [, r2] = t2[3].match(tt), o2 = new RegExp(`^${r2}`, "gm"), a2 = t2[3].replace(o2, ""), _2 = (u3 = a2, vt.some((t3) => t3.test(u3)) ? Ct : Tt);
    var u3;
    const i2 = t2[1].toLowerCase(), l2 = -1 !== c.indexOf(i2);
    e3.Z = e3.Z || "a" === i2;
    const s2 = l2 ? t2[3] : _2(n2, a2, e3);
    return e3.Z = false, { I: q2(t2[2]), $: s2, G: l2, H: l2 ? i2 : t2[1] };
  }, h: (t2, e3, r2) => G2(t2.H, n({ key: r2.k }, t2.I), t2.G ? t2.$ : e3(t2.$, r2)) }, et2.htmlSelfClosing = { t: It(E), i: Gt.HIGH, l: (t2) => ({ I: q2(t2[2] || ""), H: t2[1] }), h: (t2, e3, r2) => G2(t2.H, n({}, t2.I, { key: r2.k })) });
  const rt2 = function(t2) {
    let n2 = Object.keys(t2);
    function e3(r2, o2) {
      let c2 = [], a2 = "";
      for (; r2; ) {
        let _2 = 0;
        for (; _2 < n2.length; ) {
          const u3 = n2[_2], i2 = t2[u3], l2 = i2.t(r2, o2, a2);
          if (l2) {
            const t3 = l2[0];
            r2 = r2.substring(t3.length);
            const n3 = i2.l(l2, e3, o2);
            null == n3.type && (n3.type = u3), c2.push(n3), a2 = t3;
            break;
          }
          _2++;
        }
      }
      return c2;
    }
    return n2.sort(function(n3, e4) {
      let r2 = t2[n3].i, o2 = t2[e4].i;
      return r2 !== o2 ? r2 - o2 : n3 < e4 ? -1 : 1;
    }), function(t3, n3) {
      return e3(function(t4) {
        return t4.replace(y, "\n").replace(x, "").replace(Z, "    ");
      }(t3), n3);
    };
  }(et2), ot2 = (ct2 = function(t2) {
    return function(n2, e3, r2) {
      return t2[n2.type].h(n2, e3, r2);
    };
  }(et2), function t2(n2, e3 = {}) {
    if (Array.isArray(n2)) {
      const r2 = e3.k, o2 = [];
      let c2 = false;
      for (let r3 = 0; r3 < n2.length; r3++) {
        e3.k = r3;
        const a2 = t2(n2[r3], e3), _2 = "string" == typeof a2;
        _2 && c2 ? o2[o2.length - 1] += a2 : null !== a2 && o2.push(a2), c2 = _2;
      }
      return e3.k = r2, o2;
    }
    return ct2(n2, t2, e3);
  });
  var ct2;
  const at2 = H2(e2);
  return U2.length ? G2("div", null, at2, G2("footer", { key: "footer" }, U2.map(function(t2) {
    return G2("div", { id: u2.slugify(t2.B), key: t2.B }, t2.B, ot2(rt2(t2.O, { _: true })));
  }))) : at2;
}
!function(t2) {
  t2[t2.MAX = 0] = "MAX", t2[t2.HIGH = 1] = "HIGH", t2[t2.MED = 2] = "MED", t2[t2.LOW = 3] = "LOW", t2[t2.MIN = 4] = "MIN";
}(Gt || (Gt = {}));
var index_modern_default = (n2) => {
  let { children: r2, options: o2 } = n2, c2 = function(t2, n3) {
    if (null == t2)
      return {};
    var e2, r3, o3 = {}, c3 = Object.keys(t2);
    for (r3 = 0; r3 < c3.length; r3++)
      n3.indexOf(e2 = c3[r3]) >= 0 || (o3[e2] = t2[e2]);
    return o3;
  }(n2, e);
  return t.cloneElement(Ht(r2, o2), c2);
};

// node_modules/lodash-es/unset.js
function unset(object, path) {
  return object == null ? true : baseUnset_default(object, path);
}
var unset_default = unset;

// node_modules/@rjsf/core/dist/core.esm.js
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var _excluded$9 = ["widget", "title"];
var _excluded2 = ["widget", "title"];
var _excluded3 = ["widget", "title"];
function generateRowId() {
  return nanoid();
}
function generateKeyedFormData(formData) {
  return !Array.isArray(formData) ? [] : formData.map(function(item) {
    return {
      key: generateRowId(),
      item
    };
  });
}
function keyedToPlainFormData(keyedFormData) {
  if (Array.isArray(keyedFormData)) {
    return keyedFormData.map(function(keyedItem) {
      return keyedItem.item;
    });
  }
  return [];
}
var ArrayField = function(_Component) {
  _inheritsLoose(ArrayField2, _Component);
  function ArrayField2(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    _this._getNewFormDataRow = function() {
      var _this$props = _this.props, schema = _this$props.schema, registry = _this$props.registry;
      var schemaUtils = registry.schemaUtils;
      var itemSchema = schema.items;
      if (isFixedItems(schema) && allowAdditionalItems(schema)) {
        itemSchema = schema.additionalItems;
      }
      return schemaUtils.getDefaultFormState(itemSchema);
    };
    _this.onAddClick = function(event) {
      _this._handleAddClick(event);
    };
    _this.onAddIndexClick = function(index) {
      return function(event) {
        _this._handleAddClick(event, index);
      };
    };
    _this.onCopyIndexClick = function(index) {
      return function(event) {
        if (event) {
          event.preventDefault();
        }
        var onChange = _this.props.onChange;
        var keyedFormData = _this.state.keyedFormData;
        var newKeyedFormDataRow = {
          key: generateRowId(),
          item: cloneDeep_default(keyedFormData[index].item)
        };
        var newKeyedFormData = [].concat(keyedFormData);
        if (index !== void 0) {
          newKeyedFormData.splice(index + 1, 0, newKeyedFormDataRow);
        } else {
          newKeyedFormData.push(newKeyedFormDataRow);
        }
        _this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, function() {
          return onChange(keyedToPlainFormData(newKeyedFormData));
        });
      };
    };
    _this.onDropIndexClick = function(index) {
      return function(event) {
        if (event) {
          event.preventDefault();
        }
        var _this$props2 = _this.props, onChange = _this$props2.onChange, errorSchema = _this$props2.errorSchema;
        var keyedFormData = _this.state.keyedFormData;
        var newErrorSchema;
        if (errorSchema) {
          newErrorSchema = {};
          for (var idx in errorSchema) {
            var i2 = parseInt(idx);
            if (i2 < index) {
              set_default(newErrorSchema, [i2], errorSchema[idx]);
            } else if (i2 > index) {
              set_default(newErrorSchema, [i2 - 1], errorSchema[idx]);
            }
          }
        }
        var newKeyedFormData = keyedFormData.filter(function(_2, i3) {
          return i3 !== index;
        });
        _this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, function() {
          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);
        });
      };
    };
    _this.onReorderClick = function(index, newIndex) {
      return function(event) {
        if (event) {
          event.preventDefault();
          event.currentTarget.blur();
        }
        var _this$props3 = _this.props, onChange = _this$props3.onChange, errorSchema = _this$props3.errorSchema;
        var newErrorSchema;
        if (errorSchema) {
          newErrorSchema = {};
          for (var idx in errorSchema) {
            var i2 = parseInt(idx);
            if (i2 == index) {
              set_default(newErrorSchema, [newIndex], errorSchema[index]);
            } else if (i2 == newIndex) {
              set_default(newErrorSchema, [index], errorSchema[newIndex]);
            } else {
              set_default(newErrorSchema, [idx], errorSchema[i2]);
            }
          }
        }
        var keyedFormData = _this.state.keyedFormData;
        function reOrderArray() {
          var _newKeyedFormData = keyedFormData.slice();
          _newKeyedFormData.splice(index, 1);
          _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);
          return _newKeyedFormData;
        }
        var newKeyedFormData = reOrderArray();
        _this.setState({
          keyedFormData: newKeyedFormData
        }, function() {
          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);
        });
      };
    };
    _this.onChangeForIndex = function(index) {
      return function(value, newErrorSchema, id) {
        var _extends2;
        var _this$props4 = _this.props, formData = _this$props4.formData, onChange = _this$props4.onChange, errorSchema = _this$props4.errorSchema;
        var arrayData = Array.isArray(formData) ? formData : [];
        var newFormData = arrayData.map(function(item, i2) {
          var jsonValue = typeof value === "undefined" ? null : value;
          return index === i2 ? jsonValue : item;
        });
        onChange(newFormData, errorSchema && errorSchema && _extends({}, errorSchema, (_extends2 = {}, _extends2[index] = newErrorSchema, _extends2)), id);
      };
    };
    _this.onSelectChange = function(value) {
      var _this$props5 = _this.props, onChange = _this$props5.onChange, idSchema = _this$props5.idSchema;
      onChange(value, void 0, idSchema && idSchema.$id);
    };
    var _props$formData = props.formData, _formData = _props$formData === void 0 ? [] : _props$formData;
    var _keyedFormData = generateKeyedFormData(_formData);
    _this.state = {
      keyedFormData: _keyedFormData,
      updatedKeyedFormData: false
    };
    return _this;
  }
  ArrayField2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.updatedKeyedFormData) {
      return {
        updatedKeyedFormData: false
      };
    }
    var nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];
    var previousKeyedFormData = prevState.keyedFormData || [];
    var newKeyedFormData = nextFormData.length === previousKeyedFormData.length ? previousKeyedFormData.map(function(previousKeyedFormDatum, index) {
      return {
        key: previousKeyedFormDatum.key,
        item: nextFormData[index]
      };
    }) : generateKeyedFormData(nextFormData);
    return {
      keyedFormData: newKeyedFormData
    };
  };
  var _proto = ArrayField2.prototype;
  _proto.isItemRequired = function isItemRequired(itemSchema) {
    if (Array.isArray(itemSchema.type)) {
      return !itemSchema.type.includes("null");
    }
    return itemSchema.type !== "null";
  };
  _proto.canAddItem = function canAddItem(formItems) {
    var _this$props6 = this.props, schema = _this$props6.schema, uiSchema = _this$props6.uiSchema, registry = _this$props6.registry;
    var _getUiOptions = getUiOptions(uiSchema, registry.globalUiOptions), addable = _getUiOptions.addable;
    if (addable !== false) {
      if (schema.maxItems !== void 0) {
        addable = formItems.length < schema.maxItems;
      } else {
        addable = true;
      }
    }
    return addable;
  };
  _proto._handleAddClick = function _handleAddClick(event, index) {
    if (event) {
      event.preventDefault();
    }
    var onChange = this.props.onChange;
    var keyedFormData = this.state.keyedFormData;
    var newKeyedFormDataRow = {
      key: generateRowId(),
      item: this._getNewFormDataRow()
    };
    var newKeyedFormData = [].concat(keyedFormData);
    if (index !== void 0) {
      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);
    } else {
      newKeyedFormData.push(newKeyedFormDataRow);
    }
    this.setState({
      keyedFormData: newKeyedFormData,
      updatedKeyedFormData: true
    }, function() {
      return onChange(keyedToPlainFormData(newKeyedFormData));
    });
  };
  _proto.render = function render() {
    var _this$props7 = this.props, schema = _this$props7.schema, uiSchema = _this$props7.uiSchema, idSchema = _this$props7.idSchema, registry = _this$props7.registry;
    var schemaUtils = registry.schemaUtils, translateString = registry.translateString;
    if (!(ITEMS_KEY in schema)) {
      var uiOptions = getUiOptions(uiSchema);
      var UnsupportedFieldTemplate = getTemplate("UnsupportedFieldTemplate", registry, uiOptions);
      return (0, import_jsx_runtime.jsx)(UnsupportedFieldTemplate, {
        schema,
        idSchema,
        reason: translateString(TranslatableString.MissingItems),
        registry
      });
    }
    if (schemaUtils.isMultiSelect(schema)) {
      return this.renderMultiSelect();
    }
    if (isCustomWidget(uiSchema)) {
      return this.renderCustomWidget();
    }
    if (isFixedItems(schema)) {
      return this.renderFixedArray();
    }
    if (schemaUtils.isFilesArray(schema, uiSchema)) {
      return this.renderFiles();
    }
    return this.renderNormalArray();
  };
  _proto.renderNormalArray = function renderNormalArray() {
    var _this2 = this;
    var _this$props8 = this.props, schema = _this$props8.schema, _this$props8$uiSchema = _this$props8.uiSchema, uiSchema = _this$props8$uiSchema === void 0 ? {} : _this$props8$uiSchema, errorSchema = _this$props8.errorSchema, idSchema = _this$props8.idSchema, name = _this$props8.name, _this$props8$disabled = _this$props8.disabled, disabled = _this$props8$disabled === void 0 ? false : _this$props8$disabled, _this$props8$readonly = _this$props8.readonly, readonly = _this$props8$readonly === void 0 ? false : _this$props8$readonly, _this$props8$autofocu = _this$props8.autofocus, autofocus = _this$props8$autofocu === void 0 ? false : _this$props8$autofocu, _this$props8$required = _this$props8.required, required = _this$props8$required === void 0 ? false : _this$props8$required, registry = _this$props8.registry, onBlur = _this$props8.onBlur, onFocus = _this$props8.onFocus, idPrefix = _this$props8.idPrefix, _this$props8$idSepara = _this$props8.idSeparator, idSeparator = _this$props8$idSepara === void 0 ? "_" : _this$props8$idSepara, rawErrors = _this$props8.rawErrors;
    var keyedFormData = this.state.keyedFormData;
    var title = schema.title === void 0 ? name : schema.title;
    var schemaUtils = registry.schemaUtils, formContext = registry.formContext;
    var uiOptions = getUiOptions(uiSchema);
    var _schemaItems = isObject_default(schema.items) ? schema.items : {};
    var itemsSchema = schemaUtils.retrieveSchema(_schemaItems);
    var formData = keyedToPlainFormData(this.state.keyedFormData);
    var canAdd = this.canAddItem(formData);
    var arrayProps = {
      canAdd,
      items: keyedFormData.map(function(keyedItem, index) {
        var key = keyedItem.key, item = keyedItem.item;
        var itemCast = item;
        var itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);
        var itemErrorSchema = errorSchema ? errorSchema[index] : void 0;
        var itemIdPrefix = idSchema.$id + idSeparator + index;
        var itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);
        return _this2.renderArrayFieldItem({
          key,
          index,
          name: name && name + "-" + index,
          canAdd,
          canMoveUp: index > 0,
          canMoveDown: index < formData.length - 1,
          itemSchema,
          itemIdSchema,
          itemErrorSchema,
          itemData: itemCast,
          itemUiSchema: uiSchema.items,
          autofocus: autofocus && index === 0,
          onBlur,
          onFocus,
          rawErrors,
          totalItems: keyedFormData.length
        });
      }),
      className: "field field-array field-array-of-" + itemsSchema.type,
      disabled,
      idSchema,
      uiSchema,
      onAddClick: this.onAddClick,
      readonly,
      required,
      schema,
      title,
      formContext,
      formData,
      rawErrors,
      registry
    };
    var Template = getTemplate("ArrayFieldTemplate", registry, uiOptions);
    return (0, import_jsx_runtime.jsx)(Template, _extends({}, arrayProps));
  };
  _proto.renderCustomWidget = function renderCustomWidget() {
    var _ref;
    var _this$props9 = this.props, schema = _this$props9.schema, idSchema = _this$props9.idSchema, uiSchema = _this$props9.uiSchema, _this$props9$disabled = _this$props9.disabled, disabled = _this$props9$disabled === void 0 ? false : _this$props9$disabled, _this$props9$readonly = _this$props9.readonly, readonly = _this$props9$readonly === void 0 ? false : _this$props9$readonly, _this$props9$autofocu = _this$props9.autofocus, autofocus = _this$props9$autofocu === void 0 ? false : _this$props9$autofocu, _this$props9$required = _this$props9.required, required = _this$props9$required === void 0 ? false : _this$props9$required, hideError = _this$props9.hideError, placeholder = _this$props9.placeholder, onBlur = _this$props9.onBlur, onFocus = _this$props9.onFocus, _this$props9$formData = _this$props9.formData, items = _this$props9$formData === void 0 ? [] : _this$props9$formData, registry = _this$props9.registry, rawErrors = _this$props9.rawErrors, name = _this$props9.name;
    var widgets2 = registry.widgets, formContext = registry.formContext, globalUiOptions = registry.globalUiOptions, schemaUtils = registry.schemaUtils;
    var _getUiOptions2 = getUiOptions(uiSchema, globalUiOptions), widget = _getUiOptions2.widget, uiTitle = _getUiOptions2.title, options = _objectWithoutPropertiesLoose(_getUiOptions2, _excluded$9);
    var Widget = getWidget(schema, widget, widgets2);
    var label = (_ref = uiTitle != null ? uiTitle : schema.title) != null ? _ref : name;
    var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
    return (0, import_jsx_runtime.jsx)(Widget, {
      id: idSchema.$id,
      name,
      multiple: true,
      onChange: this.onSelectChange,
      onBlur,
      onFocus,
      options,
      schema,
      uiSchema,
      registry,
      value: items,
      disabled,
      readonly,
      hideError,
      required,
      label,
      hideLabel: !displayLabel,
      placeholder,
      formContext,
      autofocus,
      rawErrors
    });
  };
  _proto.renderMultiSelect = function renderMultiSelect() {
    var _ref2;
    var _this$props10 = this.props, schema = _this$props10.schema, idSchema = _this$props10.idSchema, uiSchema = _this$props10.uiSchema, _this$props10$formDat = _this$props10.formData, items = _this$props10$formDat === void 0 ? [] : _this$props10$formDat, _this$props10$disable = _this$props10.disabled, disabled = _this$props10$disable === void 0 ? false : _this$props10$disable, _this$props10$readonl = _this$props10.readonly, readonly = _this$props10$readonl === void 0 ? false : _this$props10$readonl, _this$props10$autofoc = _this$props10.autofocus, autofocus = _this$props10$autofoc === void 0 ? false : _this$props10$autofoc, _this$props10$require = _this$props10.required, required = _this$props10$require === void 0 ? false : _this$props10$require, placeholder = _this$props10.placeholder, onBlur = _this$props10.onBlur, onFocus = _this$props10.onFocus, registry = _this$props10.registry, rawErrors = _this$props10.rawErrors, name = _this$props10.name;
    var widgets2 = registry.widgets, schemaUtils = registry.schemaUtils, formContext = registry.formContext, globalUiOptions = registry.globalUiOptions;
    var itemsSchema = schemaUtils.retrieveSchema(schema.items, items);
    var enumOptions = optionsList(itemsSchema);
    var _getUiOptions3 = getUiOptions(uiSchema, globalUiOptions), _getUiOptions3$widget = _getUiOptions3.widget, widget = _getUiOptions3$widget === void 0 ? "select" : _getUiOptions3$widget, uiTitle = _getUiOptions3.title, options = _objectWithoutPropertiesLoose(_getUiOptions3, _excluded2);
    var Widget = getWidget(schema, widget, widgets2);
    var label = (_ref2 = uiTitle != null ? uiTitle : schema.title) != null ? _ref2 : name;
    var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
    return (0, import_jsx_runtime.jsx)(Widget, {
      id: idSchema.$id,
      name,
      multiple: true,
      onChange: this.onSelectChange,
      onBlur,
      onFocus,
      options: _extends({}, options, {
        enumOptions
      }),
      schema,
      uiSchema,
      registry,
      value: items,
      disabled,
      readonly,
      required,
      label,
      hideLabel: !displayLabel,
      placeholder,
      formContext,
      autofocus,
      rawErrors
    });
  };
  _proto.renderFiles = function renderFiles() {
    var _ref3;
    var _this$props11 = this.props, schema = _this$props11.schema, uiSchema = _this$props11.uiSchema, idSchema = _this$props11.idSchema, name = _this$props11.name, _this$props11$disable = _this$props11.disabled, disabled = _this$props11$disable === void 0 ? false : _this$props11$disable, _this$props11$readonl = _this$props11.readonly, readonly = _this$props11$readonl === void 0 ? false : _this$props11$readonl, _this$props11$autofoc = _this$props11.autofocus, autofocus = _this$props11$autofoc === void 0 ? false : _this$props11$autofoc, _this$props11$require = _this$props11.required, required = _this$props11$require === void 0 ? false : _this$props11$require, onBlur = _this$props11.onBlur, onFocus = _this$props11.onFocus, registry = _this$props11.registry, _this$props11$formDat = _this$props11.formData, items = _this$props11$formDat === void 0 ? [] : _this$props11$formDat, rawErrors = _this$props11.rawErrors;
    var widgets2 = registry.widgets, formContext = registry.formContext, globalUiOptions = registry.globalUiOptions, schemaUtils = registry.schemaUtils;
    var _getUiOptions4 = getUiOptions(uiSchema, globalUiOptions), _getUiOptions4$widget = _getUiOptions4.widget, widget = _getUiOptions4$widget === void 0 ? "files" : _getUiOptions4$widget, uiTitle = _getUiOptions4.title, options = _objectWithoutPropertiesLoose(_getUiOptions4, _excluded3);
    var Widget = getWidget(schema, widget, widgets2);
    var label = (_ref3 = uiTitle != null ? uiTitle : schema.title) != null ? _ref3 : name;
    var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
    return (0, import_jsx_runtime.jsx)(Widget, {
      options,
      id: idSchema.$id,
      name,
      multiple: true,
      onChange: this.onSelectChange,
      onBlur,
      onFocus,
      schema,
      uiSchema,
      value: items,
      disabled,
      readonly,
      required,
      registry,
      formContext,
      autofocus,
      rawErrors,
      label,
      hideLabel: !displayLabel
    });
  };
  _proto.renderFixedArray = function renderFixedArray() {
    var _this3 = this;
    var _this$props12 = this.props, schema = _this$props12.schema, _this$props12$uiSchem = _this$props12.uiSchema, uiSchema = _this$props12$uiSchem === void 0 ? {} : _this$props12$uiSchem, _this$props12$formDat = _this$props12.formData, formData = _this$props12$formDat === void 0 ? [] : _this$props12$formDat, errorSchema = _this$props12.errorSchema, idPrefix = _this$props12.idPrefix, _this$props12$idSepar = _this$props12.idSeparator, idSeparator = _this$props12$idSepar === void 0 ? "_" : _this$props12$idSepar, idSchema = _this$props12.idSchema, name = _this$props12.name, _this$props12$disable = _this$props12.disabled, disabled = _this$props12$disable === void 0 ? false : _this$props12$disable, _this$props12$readonl = _this$props12.readonly, readonly = _this$props12$readonl === void 0 ? false : _this$props12$readonl, _this$props12$autofoc = _this$props12.autofocus, autofocus = _this$props12$autofoc === void 0 ? false : _this$props12$autofoc, _this$props12$require = _this$props12.required, required = _this$props12$require === void 0 ? false : _this$props12$require, registry = _this$props12.registry, onBlur = _this$props12.onBlur, onFocus = _this$props12.onFocus, rawErrors = _this$props12.rawErrors;
    var keyedFormData = this.state.keyedFormData;
    var _this$props$formData = this.props.formData, items = _this$props$formData === void 0 ? [] : _this$props$formData;
    var title = schema.title || name;
    var uiOptions = getUiOptions(uiSchema);
    var schemaUtils = registry.schemaUtils, formContext = registry.formContext;
    var _schemaItems = isObject_default(schema.items) ? schema.items : [];
    var itemSchemas = _schemaItems.map(function(item, index) {
      return schemaUtils.retrieveSchema(item, formData[index]);
    });
    var additionalSchema = isObject_default(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, formData) : null;
    if (!items || items.length < itemSchemas.length) {
      items = items || [];
      items = items.concat(new Array(itemSchemas.length - items.length));
    }
    var canAdd = this.canAddItem(items) && !!additionalSchema;
    var arrayProps = {
      canAdd,
      className: "field field-array field-array-fixed-items",
      disabled,
      idSchema,
      formData,
      items: keyedFormData.map(function(keyedItem, index) {
        var key = keyedItem.key, item = keyedItem.item;
        var itemCast = item;
        var additional = index >= itemSchemas.length;
        var itemSchema = additional && isObject_default(schema.additionalItems) ? schemaUtils.retrieveSchema(schema.additionalItems, itemCast) : itemSchemas[index];
        var itemIdPrefix = idSchema.$id + idSeparator + index;
        var itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);
        var itemUiSchema = additional ? uiSchema.additionalItems || {} : Array.isArray(uiSchema.items) ? uiSchema.items[index] : uiSchema.items || {};
        var itemErrorSchema = errorSchema ? errorSchema[index] : void 0;
        return _this3.renderArrayFieldItem({
          key,
          index,
          name: name && name + "-" + index,
          canAdd,
          canRemove: additional,
          canMoveUp: index >= itemSchemas.length + 1,
          canMoveDown: additional && index < items.length - 1,
          itemSchema,
          itemData: itemCast,
          itemUiSchema,
          itemIdSchema,
          itemErrorSchema,
          autofocus: autofocus && index === 0,
          onBlur,
          onFocus,
          rawErrors,
          totalItems: keyedFormData.length
        });
      }),
      onAddClick: this.onAddClick,
      readonly,
      required,
      registry,
      schema,
      uiSchema,
      title,
      formContext,
      rawErrors
    };
    var Template = getTemplate("ArrayFieldTemplate", registry, uiOptions);
    return (0, import_jsx_runtime.jsx)(Template, _extends({}, arrayProps));
  };
  _proto.renderArrayFieldItem = function renderArrayFieldItem(props) {
    var key = props.key, index = props.index, name = props.name, canAdd = props.canAdd, _props$canRemove = props.canRemove, canRemove = _props$canRemove === void 0 ? true : _props$canRemove, canMoveUp = props.canMoveUp, canMoveDown = props.canMoveDown, itemSchema = props.itemSchema, itemData = props.itemData, itemUiSchema = props.itemUiSchema, itemIdSchema = props.itemIdSchema, itemErrorSchema = props.itemErrorSchema, autofocus = props.autofocus, onBlur = props.onBlur, onFocus = props.onFocus, rawErrors = props.rawErrors, totalItems = props.totalItems;
    var _this$props13 = this.props, disabled = _this$props13.disabled, hideError = _this$props13.hideError, idPrefix = _this$props13.idPrefix, idSeparator = _this$props13.idSeparator, readonly = _this$props13.readonly, uiSchema = _this$props13.uiSchema, registry = _this$props13.registry, formContext = _this$props13.formContext;
    var _registry$fields = registry.fields, ArraySchemaField = _registry$fields.ArraySchemaField, SchemaField2 = _registry$fields.SchemaField, globalUiOptions = registry.globalUiOptions;
    var ItemSchemaField = ArraySchemaField || SchemaField2;
    var _getUiOptions5 = getUiOptions(uiSchema, globalUiOptions), _getUiOptions5$ordera = _getUiOptions5.orderable, orderable = _getUiOptions5$ordera === void 0 ? true : _getUiOptions5$ordera, _getUiOptions5$remova = _getUiOptions5.removable, removable = _getUiOptions5$remova === void 0 ? true : _getUiOptions5$remova, _getUiOptions5$copyab = _getUiOptions5.copyable, copyable = _getUiOptions5$copyab === void 0 ? false : _getUiOptions5$copyab;
    var has = {
      moveUp: orderable && canMoveUp,
      moveDown: orderable && canMoveDown,
      copy: copyable && canAdd,
      remove: removable && canRemove,
      toolbar: false
    };
    has.toolbar = Object.keys(has).some(function(key2) {
      return has[key2];
    });
    return {
      children: (0, import_jsx_runtime.jsx)(ItemSchemaField, {
        name,
        index,
        schema: itemSchema,
        uiSchema: itemUiSchema,
        formData: itemData,
        formContext,
        errorSchema: itemErrorSchema,
        idPrefix,
        idSeparator,
        idSchema: itemIdSchema,
        required: this.isItemRequired(itemSchema),
        onChange: this.onChangeForIndex(index),
        onBlur,
        onFocus,
        registry,
        disabled,
        readonly,
        hideError,
        autofocus,
        rawErrors
      }),
      className: "array-item",
      disabled,
      canAdd,
      hasCopy: has.copy,
      hasToolbar: has.toolbar,
      hasMoveUp: has.moveUp,
      hasMoveDown: has.moveDown,
      hasRemove: has.remove,
      index,
      totalItems,
      key,
      onAddIndexClick: this.onAddIndexClick,
      onCopyIndexClick: this.onCopyIndexClick,
      onDropIndexClick: this.onDropIndexClick,
      onReorderClick: this.onReorderClick,
      readonly,
      registry,
      schema: itemSchema,
      uiSchema: itemUiSchema
    };
  };
  _createClass(ArrayField2, [{
    key: "itemTitle",
    get: function get$1() {
      var _this$props14 = this.props, schema = _this$props14.schema, registry = _this$props14.registry;
      var translateString = registry.translateString;
      return get_default(schema, [ITEMS_KEY, "title"], get_default(schema, [ITEMS_KEY, "description"], translateString(TranslatableString.ArrayItemTitle)));
    }
  }]);
  return ArrayField2;
}(import_react.Component);
var _excluded$8 = ["widget", "title", "label"];
function BooleanField(props) {
  var _ref;
  var schema = props.schema, name = props.name, uiSchema = props.uiSchema, idSchema = props.idSchema, formData = props.formData, registry = props.registry, required = props.required, disabled = props.disabled, readonly = props.readonly, autofocus = props.autofocus, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, rawErrors = props.rawErrors;
  var title = schema.title;
  var widgets2 = registry.widgets, formContext = registry.formContext, translateString = registry.translateString, globalUiOptions = registry.globalUiOptions;
  var _getUiOptions = getUiOptions(uiSchema, globalUiOptions), _getUiOptions$widget = _getUiOptions.widget, widget = _getUiOptions$widget === void 0 ? "checkbox" : _getUiOptions$widget, uiTitle = _getUiOptions.title, _getUiOptions$label = _getUiOptions.label, displayLabel = _getUiOptions$label === void 0 ? true : _getUiOptions$label, options = _objectWithoutPropertiesLoose(_getUiOptions, _excluded$8);
  var Widget = getWidget(schema, widget, widgets2);
  var yes = translateString(TranslatableString.YesLabel);
  var no = translateString(TranslatableString.NoLabel);
  var enumOptions;
  var label = (_ref = uiTitle != null ? uiTitle : title) != null ? _ref : name;
  if (Array.isArray(schema.oneOf)) {
    enumOptions = optionsList({
      oneOf: schema.oneOf.map(function(option) {
        if (isObject_default(option)) {
          return _extends({}, option, {
            title: option.title || (option["const"] === true ? yes : no)
          });
        }
        return void 0;
      }).filter(function(o2) {
        return o2;
      })
      // cast away the error that typescript can't grok is fixed
    });
  } else {
    var _schema$enum;
    var schemaWithEnumNames = schema;
    var enums = (_schema$enum = schema["enum"]) != null ? _schema$enum : [true, false];
    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every(function(v2) {
      return typeof v2 === "boolean";
    })) {
      enumOptions = [{
        value: enums[0],
        label: enums[0] ? yes : no
      }, {
        value: enums[1],
        label: enums[1] ? yes : no
      }];
    } else {
      enumOptions = optionsList({
        "enum": enums,
        // NOTE: enumNames is deprecated, but still supported for now.
        enumNames: schemaWithEnumNames.enumNames
      });
    }
  }
  return (0, import_jsx_runtime.jsx)(Widget, {
    options: _extends({}, options, {
      enumOptions
    }),
    schema,
    uiSchema,
    id: idSchema.$id,
    name,
    onChange,
    onFocus,
    onBlur,
    label,
    hideLabel: !displayLabel,
    value: formData,
    required,
    disabled,
    readonly,
    registry,
    formContext,
    autofocus,
    rawErrors
  });
}
var _excluded$7 = ["widget", "placeholder", "autofocus", "autocomplete", "title"];
var AnyOfField = function(_Component) {
  _inheritsLoose(AnyOfField2, _Component);
  function AnyOfField2(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    _this.onOptionChange = function(option) {
      var _this$state = _this.state, selectedOption = _this$state.selectedOption, retrievedOptions = _this$state.retrievedOptions;
      var _this$props = _this.props, formData = _this$props.formData, onChange = _this$props.onChange, registry = _this$props.registry;
      var schemaUtils = registry.schemaUtils;
      var intOption = option !== void 0 ? parseInt(option, 10) : -1;
      if (intOption === selectedOption) {
        return;
      }
      var newOption = intOption >= 0 ? retrievedOptions[intOption] : void 0;
      var oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : void 0;
      var newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);
      if (newFormData && newOption) {
        newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, "excludeObjectChildren");
      }
      onChange(newFormData, void 0, _this.getFieldId());
      _this.setState({
        selectedOption: intOption
      });
    };
    var _this$props2 = _this.props, _formData = _this$props2.formData, options = _this$props2.options, _schemaUtils = _this$props2.registry.schemaUtils;
    var _retrievedOptions = options.map(function(opt) {
      return _schemaUtils.retrieveSchema(opt, _formData);
    });
    _this.state = {
      retrievedOptions: _retrievedOptions,
      selectedOption: _this.getMatchingOption(0, _formData, _retrievedOptions)
    };
    return _this;
  }
  var _proto = AnyOfField2.prototype;
  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    var _this$props3 = this.props, formData = _this$props3.formData, options = _this$props3.options, idSchema = _this$props3.idSchema;
    var selectedOption = this.state.selectedOption;
    var newState = this.state;
    if (!deepEquals(prevProps.options, options)) {
      var schemaUtils = this.props.registry.schemaUtils;
      var retrievedOptions = options.map(function(opt) {
        return schemaUtils.retrieveSchema(opt, formData);
      });
      newState = {
        selectedOption,
        retrievedOptions
      };
    }
    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {
      var _newState = newState, _retrievedOptions2 = _newState.retrievedOptions;
      var matchingOption = this.getMatchingOption(selectedOption, formData, _retrievedOptions2);
      if (prevState && matchingOption !== selectedOption) {
        newState = {
          selectedOption: matchingOption,
          retrievedOptions: _retrievedOptions2
        };
      }
    }
    if (newState !== this.state) {
      this.setState(newState);
    }
  };
  _proto.getMatchingOption = function getMatchingOption(selectedOption, formData, options) {
    var _this$props4 = this.props, schema = _this$props4.schema, schemaUtils = _this$props4.registry.schemaUtils;
    var discriminator;
    var maybeString = get_default(schema, "discriminator.propertyName", void 0);
    if (isString_default(maybeString)) {
      discriminator = maybeString;
    } else if (maybeString !== void 0) {
      console.warn('Expecting discriminator to be a string, got "' + typeof maybeString + '" instead');
    }
    var option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption, discriminator);
    if (option > 0) {
      return option;
    }
    return selectedOption || 0;
  };
  _proto.getFieldId = function getFieldId() {
    var _this$props5 = this.props, idSchema = _this$props5.idSchema, schema = _this$props5.schema;
    return "" + idSchema.$id + (schema.oneOf ? "__oneof_select" : "__anyof_select");
  };
  _proto.render = function render() {
    var _this$props6 = this.props, name = _this$props6.name, baseType = _this$props6.baseType, _this$props6$disabled = _this$props6.disabled, disabled = _this$props6$disabled === void 0 ? false : _this$props6$disabled, _this$props6$errorSch = _this$props6.errorSchema, errorSchema = _this$props6$errorSch === void 0 ? {} : _this$props6$errorSch, formContext = _this$props6.formContext, onBlur = _this$props6.onBlur, onFocus = _this$props6.onFocus, registry = _this$props6.registry, schema = _this$props6.schema, uiSchema = _this$props6.uiSchema;
    var widgets2 = registry.widgets, fields2 = registry.fields, translateString = registry.translateString, globalUiOptions = registry.globalUiOptions, schemaUtils = registry.schemaUtils;
    var _SchemaField = fields2.SchemaField;
    var _this$state2 = this.state, selectedOption = _this$state2.selectedOption, retrievedOptions = _this$state2.retrievedOptions;
    var _getUiOptions = getUiOptions(uiSchema, globalUiOptions), _getUiOptions$widget = _getUiOptions.widget, widget = _getUiOptions$widget === void 0 ? "select" : _getUiOptions$widget, placeholder = _getUiOptions.placeholder, autofocus = _getUiOptions.autofocus, autocomplete = _getUiOptions.autocomplete, _getUiOptions$title = _getUiOptions.title, title = _getUiOptions$title === void 0 ? schema.title : _getUiOptions$title, uiOptions = _objectWithoutPropertiesLoose(_getUiOptions, _excluded$7);
    var Widget = getWidget({
      type: "number"
    }, widget, widgets2);
    var rawErrors = get_default(errorSchema, ERRORS_KEY, []);
    var fieldErrorSchema = omit_default(errorSchema, [ERRORS_KEY]);
    var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
    var option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;
    var optionSchema;
    if (option) {
      optionSchema = option.type ? option : Object.assign({}, option, {
        type: baseType
      });
    }
    var translateEnum = title ? TranslatableString.TitleOptionPrefix : TranslatableString.OptionPrefix;
    var translateParams = title ? [title] : [];
    var enumOptions = retrievedOptions.map(function(opt, index) {
      return {
        label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),
        value: index
      };
    });
    return (0, import_jsx_runtime.jsxs)("div", {
      className: "panel panel-default panel-body",
      children: [(0, import_jsx_runtime.jsx)("div", {
        className: "form-group",
        children: (0, import_jsx_runtime.jsx)(Widget, {
          id: this.getFieldId(),
          name: "" + name + (schema.oneOf ? "__oneof_select" : "__anyof_select"),
          schema: {
            type: "number",
            "default": 0
          },
          onChange: this.onOptionChange,
          onBlur,
          onFocus,
          disabled: disabled || isEmpty_default(enumOptions),
          multiple: false,
          rawErrors,
          errorSchema: fieldErrorSchema,
          value: selectedOption >= 0 ? selectedOption : void 0,
          options: _extends({
            enumOptions
          }, uiOptions),
          registry,
          formContext,
          placeholder,
          autocomplete,
          autofocus,
          label: title != null ? title : name,
          hideLabel: !displayLabel
        })
      }), option !== null && (0, import_jsx_runtime.jsx)(_SchemaField, _extends({}, this.props, {
        schema: optionSchema
      }))]
    });
  };
  return AnyOfField2;
}(import_react.Component);
var trailingCharMatcherWithPrefix = /\.([0-9]*0)*$/;
var trailingCharMatcher = /[0.]0*$/;
function NumberField(props) {
  var registry = props.registry, onChange = props.onChange, formData = props.formData, initialValue = props.value;
  var _useState = (0, import_react.useState)(initialValue), lastValue = _useState[0], setLastValue = _useState[1];
  var StringField2 = registry.fields.StringField;
  var value = formData;
  var handleChange = (0, import_react.useCallback)(function(value2) {
    setLastValue(value2);
    if (("" + value2).charAt(0) === ".") {
      value2 = "0" + value2;
    }
    var processed = typeof value2 === "string" && value2.match(trailingCharMatcherWithPrefix) ? asNumber(value2.replace(trailingCharMatcher, "")) : asNumber(value2);
    onChange(processed);
  }, [onChange]);
  if (typeof lastValue === "string" && typeof value === "number") {
    var re = new RegExp(("" + value).replace(".", "\\.") + "\\.?0*$");
    if (lastValue.match(re)) {
      value = lastValue;
    }
  }
  return (0, import_jsx_runtime.jsx)(StringField2, _extends({}, props, {
    formData: value,
    onChange: handleChange
  }));
}
var ObjectField = function(_Component) {
  _inheritsLoose(ObjectField2, _Component);
  function ObjectField2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
    _this.state = {
      wasPropertyKeyModified: false,
      additionalProperties: {}
    };
    _this.onPropertyChange = function(name, addedByAdditionalProperties) {
      if (addedByAdditionalProperties === void 0) {
        addedByAdditionalProperties = false;
      }
      return function(value, newErrorSchema, id) {
        var _extends2, _extends3;
        var _this$props = _this.props, formData = _this$props.formData, onChange = _this$props.onChange, errorSchema = _this$props.errorSchema;
        if (value === void 0 && addedByAdditionalProperties) {
          value = "";
        }
        var newFormData = _extends({}, formData, (_extends2 = {}, _extends2[name] = value, _extends2));
        onChange(newFormData, errorSchema && errorSchema && _extends({}, errorSchema, (_extends3 = {}, _extends3[name] = newErrorSchema, _extends3)), id);
      };
    };
    _this.onDropPropertyClick = function(key) {
      return function(event) {
        event.preventDefault();
        var _this$props2 = _this.props, onChange = _this$props2.onChange, formData = _this$props2.formData;
        var copiedFormData = _extends({}, formData);
        unset_default(copiedFormData, key);
        onChange(copiedFormData);
      };
    };
    _this.getAvailableKey = function(preferredKey, formData) {
      var _this$props3 = _this.props, uiSchema = _this$props3.uiSchema, registry = _this$props3.registry;
      var _getUiOptions = getUiOptions(uiSchema, registry.globalUiOptions), _getUiOptions$duplica = _getUiOptions.duplicateKeySuffixSeparator, duplicateKeySuffixSeparator = _getUiOptions$duplica === void 0 ? "-" : _getUiOptions$duplica;
      var index = 0;
      var newKey = preferredKey;
      while (has_default(formData, newKey)) {
        newKey = "" + preferredKey + duplicateKeySuffixSeparator + ++index;
      }
      return newKey;
    };
    _this.onKeyChange = function(oldValue) {
      return function(value, newErrorSchema) {
        var _newKeys, _extends4;
        if (oldValue === value) {
          return;
        }
        var _this$props4 = _this.props, formData = _this$props4.formData, onChange = _this$props4.onChange, errorSchema = _this$props4.errorSchema;
        value = _this.getAvailableKey(value, formData);
        var newFormData = _extends({}, formData);
        var newKeys = (_newKeys = {}, _newKeys[oldValue] = value, _newKeys);
        var keyValues = Object.keys(newFormData).map(function(key) {
          var _ref;
          var newKey = newKeys[key] || key;
          return _ref = {}, _ref[newKey] = newFormData[key], _ref;
        });
        var renamedObj = Object.assign.apply(Object, [{}].concat(keyValues));
        _this.setState({
          wasPropertyKeyModified: true
        });
        onChange(renamedObj, errorSchema && errorSchema && _extends({}, errorSchema, (_extends4 = {}, _extends4[value] = newErrorSchema, _extends4)));
      };
    };
    _this.handleAddClick = function(schema) {
      return function() {
        if (!schema.additionalProperties) {
          return;
        }
        var _this$props5 = _this.props, formData = _this$props5.formData, onChange = _this$props5.onChange, registry = _this$props5.registry;
        var newFormData = _extends({}, formData);
        var type = void 0;
        if (isObject_default(schema.additionalProperties)) {
          type = schema.additionalProperties.type;
          var apSchema = schema.additionalProperties;
          if (REF_KEY in apSchema) {
            var schemaUtils = registry.schemaUtils;
            apSchema = schemaUtils.retrieveSchema({
              $ref: apSchema[REF_KEY]
            }, formData);
            type = apSchema.type;
          }
          if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {
            type = "object";
          }
        }
        var newKey = _this.getAvailableKey("newKey", newFormData);
        set_default(newFormData, newKey, _this.getDefaultValue(type));
        onChange(newFormData);
      };
    };
    return _this;
  }
  var _proto = ObjectField2.prototype;
  _proto.isRequired = function isRequired(name) {
    var schema = this.props.schema;
    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;
  };
  _proto.getDefaultValue = function getDefaultValue(type) {
    var translateString = this.props.registry.translateString;
    switch (type) {
      case "array":
        return [];
      case "boolean":
        return false;
      case "null":
        return null;
      case "number":
        return 0;
      case "object":
        return {};
      case "string":
      default:
        return translateString(TranslatableString.NewStringDefault);
    }
  };
  _proto.render = function render() {
    var _ref2, _uiOptions$title, _uiOptions$descriptio, _this2 = this;
    var _this$props6 = this.props, rawSchema = _this$props6.schema, _this$props6$uiSchema = _this$props6.uiSchema, uiSchema = _this$props6$uiSchema === void 0 ? {} : _this$props6$uiSchema, formData = _this$props6.formData, errorSchema = _this$props6.errorSchema, idSchema = _this$props6.idSchema, name = _this$props6.name, _this$props6$required = _this$props6.required, required = _this$props6$required === void 0 ? false : _this$props6$required, _this$props6$disabled = _this$props6.disabled, disabled = _this$props6$disabled === void 0 ? false : _this$props6$disabled, _this$props6$readonly = _this$props6.readonly, readonly = _this$props6$readonly === void 0 ? false : _this$props6$readonly, hideError = _this$props6.hideError, idPrefix = _this$props6.idPrefix, idSeparator = _this$props6.idSeparator, onBlur = _this$props6.onBlur, onFocus = _this$props6.onFocus, registry = _this$props6.registry;
    var fields2 = registry.fields, formContext = registry.formContext, schemaUtils = registry.schemaUtils, translateString = registry.translateString, globalUiOptions = registry.globalUiOptions;
    var SchemaField2 = fields2.SchemaField;
    var schema = schemaUtils.retrieveSchema(rawSchema, formData);
    var uiOptions = getUiOptions(uiSchema, globalUiOptions);
    var _schema$properties = schema.properties, schemaProperties = _schema$properties === void 0 ? {} : _schema$properties;
    var title = (_ref2 = (_uiOptions$title = uiOptions.title) != null ? _uiOptions$title : schema.title) != null ? _ref2 : name;
    var description = (_uiOptions$descriptio = uiOptions.description) != null ? _uiOptions$descriptio : schema.description;
    var orderedProperties;
    try {
      var properties = Object.keys(schemaProperties);
      orderedProperties = orderProperties(properties, uiOptions.order);
    } catch (err) {
      return (0, import_jsx_runtime.jsxs)("div", {
        children: [(0, import_jsx_runtime.jsx)("p", {
          className: "config-error",
          style: {
            color: "red"
          },
          children: (0, import_jsx_runtime.jsx)(index_modern_default, {
            children: translateString(TranslatableString.InvalidObjectField, [name || "root", err.message])
          })
        }), (0, import_jsx_runtime.jsx)("pre", {
          children: JSON.stringify(schema)
        })]
      });
    }
    var Template = getTemplate("ObjectFieldTemplate", registry, uiOptions);
    var templateProps = {
      // getDisplayLabel() always returns false for object types, so just check the `uiOptions.label`
      title: uiOptions.label === false ? "" : title,
      description: uiOptions.label === false ? void 0 : description,
      properties: orderedProperties.map(function(name2) {
        var addedByAdditionalProperties = has_default(schema, [PROPERTIES_KEY, name2, ADDITIONAL_PROPERTY_FLAG]);
        var fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name2];
        var hidden = getUiOptions(fieldUiSchema).widget === "hidden";
        var fieldIdSchema = get_default(idSchema, [name2], {});
        return {
          content: (0, import_jsx_runtime.jsx)(SchemaField2, {
            name: name2,
            required: _this2.isRequired(name2),
            schema: get_default(schema, [PROPERTIES_KEY, name2], {}),
            uiSchema: fieldUiSchema,
            errorSchema: get_default(errorSchema, name2),
            idSchema: fieldIdSchema,
            idPrefix,
            idSeparator,
            formData: get_default(formData, name2),
            formContext,
            wasPropertyKeyModified: _this2.state.wasPropertyKeyModified,
            onKeyChange: _this2.onKeyChange(name2),
            onChange: _this2.onPropertyChange(name2, addedByAdditionalProperties),
            onBlur,
            onFocus,
            registry,
            disabled,
            readonly,
            hideError,
            onDropPropertyClick: _this2.onDropPropertyClick
          }, name2),
          name: name2,
          readonly,
          disabled,
          required,
          hidden
        };
      }),
      readonly,
      disabled,
      required,
      idSchema,
      uiSchema,
      errorSchema,
      schema,
      formData,
      formContext,
      registry
    };
    return (0, import_jsx_runtime.jsx)(Template, _extends({}, templateProps, {
      onAddClick: this.handleAddClick
    }));
  };
  return ObjectField2;
}(import_react.Component);
var _excluded$6 = ["__errors"];
var COMPONENT_TYPES = {
  array: "ArrayField",
  "boolean": "BooleanField",
  integer: "NumberField",
  number: "NumberField",
  object: "ObjectField",
  string: "StringField",
  "null": "NullField"
};
function getFieldComponent(schema, uiOptions, idSchema, registry) {
  var field = uiOptions.field;
  var fields2 = registry.fields, translateString = registry.translateString;
  if (typeof field === "function") {
    return field;
  }
  if (typeof field === "string" && field in fields2) {
    return fields2[field];
  }
  var schemaType = getSchemaType(schema);
  var type = Array.isArray(schemaType) ? schemaType[0] : schemaType || "";
  var componentName = COMPONENT_TYPES[type];
  if (!componentName && (schema.anyOf || schema.oneOf)) {
    return function() {
      return null;
    };
  }
  return componentName in fields2 ? fields2[componentName] : function() {
    var UnsupportedFieldTemplate = getTemplate("UnsupportedFieldTemplate", registry, uiOptions);
    return (0, import_jsx_runtime.jsx)(UnsupportedFieldTemplate, {
      schema,
      idSchema,
      reason: translateString(TranslatableString.UnknownFieldType, [String(schema.type)]),
      registry
    });
  };
}
function SchemaFieldRender(props) {
  var _schema = props.schema, _idSchema = props.idSchema, uiSchema = props.uiSchema, formData = props.formData, errorSchema = props.errorSchema, idPrefix = props.idPrefix, idSeparator = props.idSeparator, name = props.name, onChange = props.onChange, onKeyChange = props.onKeyChange, onDropPropertyClick = props.onDropPropertyClick, required = props.required, registry = props.registry, _props$wasPropertyKey = props.wasPropertyKeyModified, wasPropertyKeyModified = _props$wasPropertyKey === void 0 ? false : _props$wasPropertyKey;
  var formContext = registry.formContext, schemaUtils = registry.schemaUtils, globalUiOptions = registry.globalUiOptions;
  var uiOptions = getUiOptions(uiSchema, globalUiOptions);
  var FieldTemplate2 = getTemplate("FieldTemplate", registry, uiOptions);
  var DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, uiOptions);
  var FieldHelpTemplate2 = getTemplate("FieldHelpTemplate", registry, uiOptions);
  var FieldErrorTemplate2 = getTemplate("FieldErrorTemplate", registry, uiOptions);
  var schema = schemaUtils.retrieveSchema(_schema, formData);
  var fieldId = _idSchema[ID_KEY];
  var idSchema = mergeObjects(schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator), _idSchema);
  var handleFieldComponentChange = (0, import_react.useCallback)(function(formData2, newErrorSchema, id2) {
    var theId = id2 || fieldId;
    return onChange(formData2, newErrorSchema, theId);
  }, [fieldId, onChange]);
  var FieldComponent = getFieldComponent(schema, uiOptions, idSchema, registry);
  var disabled = Boolean(props.disabled || uiOptions.disabled);
  var readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);
  var uiSchemaHideError = uiOptions.hideError;
  var hideError = uiSchemaHideError === void 0 ? props.hideError : Boolean(uiSchemaHideError);
  var autofocus = Boolean(props.autofocus || uiOptions.autofocus);
  if (Object.keys(schema).length === 0) {
    return null;
  }
  var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
  var _ref = errorSchema || {}, __errors = _ref.__errors, fieldErrorSchema = _objectWithoutPropertiesLoose(_ref, _excluded$6);
  var fieldUiSchema = omit_default(uiSchema, ["ui:classNames", "classNames", "ui:style"]);
  if (UI_OPTIONS_KEY in fieldUiSchema) {
    fieldUiSchema[UI_OPTIONS_KEY] = omit_default(fieldUiSchema[UI_OPTIONS_KEY], ["classNames", "style"]);
  }
  var field = (0, import_jsx_runtime.jsx)(FieldComponent, _extends({}, props, {
    onChange: handleFieldComponentChange,
    idSchema,
    schema,
    uiSchema: fieldUiSchema,
    disabled,
    readonly,
    hideError,
    autofocus,
    errorSchema: fieldErrorSchema,
    formContext,
    rawErrors: __errors
  }));
  var id = idSchema[ID_KEY];
  var label;
  if (wasPropertyKeyModified) {
    label = name;
  } else {
    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;
  }
  var description = uiOptions.description || props.schema.description || schema.description || "";
  var help = uiOptions.help;
  var hidden = uiOptions.widget === "hidden";
  var classNames = ["form-group", "field", "field-" + getSchemaType(schema)];
  if (!hideError && __errors && __errors.length > 0) {
    classNames.push("field-error has-error has-danger");
  }
  if (uiSchema !== null && uiSchema !== void 0 && uiSchema.classNames) {
    if (true) {
      console.warn("'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.");
    }
    classNames.push(uiSchema.classNames);
  }
  if (uiOptions.classNames) {
    classNames.push(uiOptions.classNames);
  }
  var helpComponent = (0, import_jsx_runtime.jsx)(FieldHelpTemplate2, {
    help,
    idSchema,
    schema,
    uiSchema,
    hasErrors: !hideError && __errors && __errors.length > 0,
    registry
  });
  var errorsComponent = hideError ? void 0 : (0, import_jsx_runtime.jsx)(FieldErrorTemplate2, {
    errors: __errors,
    errorSchema,
    idSchema,
    schema,
    uiSchema,
    registry
  });
  var fieldProps = {
    description: (0, import_jsx_runtime.jsx)(DescriptionFieldTemplate, {
      id: descriptionId(id),
      description,
      schema,
      uiSchema,
      registry
    }),
    rawDescription: description,
    help: helpComponent,
    rawHelp: typeof help === "string" ? help : void 0,
    errors: errorsComponent,
    rawErrors: hideError ? void 0 : __errors,
    id,
    label,
    hidden,
    onChange,
    onKeyChange,
    onDropPropertyClick,
    required,
    disabled,
    readonly,
    hideError,
    displayLabel,
    classNames: classNames.join(" ").trim(),
    style: uiOptions.style,
    formContext,
    formData,
    schema,
    uiSchema,
    registry
  };
  var _AnyOfField = registry.fields.AnyOfField;
  var _OneOfField = registry.fields.OneOfField;
  var isReplacingAnyOrOneOf = (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema["ui:field"]) && (uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema["ui:fieldReplacesAnyOrOneOf"]) === true;
  return (0, import_jsx_runtime.jsx)(FieldTemplate2, _extends({}, fieldProps, {
    children: (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
      children: [field, schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (0, import_jsx_runtime.jsx)(_AnyOfField, {
        name,
        disabled,
        readonly,
        hideError,
        errorSchema,
        formData,
        formContext,
        idPrefix,
        idSchema,
        idSeparator,
        onBlur: props.onBlur,
        onChange: props.onChange,
        onFocus: props.onFocus,
        options: schema.anyOf.map(function(_schema2) {
          return schemaUtils.retrieveSchema(isObject_default(_schema2) ? _schema2 : {}, formData);
        }),
        baseType: schema.type,
        registry,
        schema,
        uiSchema
      }), schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (0, import_jsx_runtime.jsx)(_OneOfField, {
        name,
        disabled,
        readonly,
        hideError,
        errorSchema,
        formData,
        formContext,
        idPrefix,
        idSchema,
        idSeparator,
        onBlur: props.onBlur,
        onChange: props.onChange,
        onFocus: props.onFocus,
        options: schema.oneOf.map(function(_schema2) {
          return schemaUtils.retrieveSchema(isObject_default(_schema2) ? _schema2 : {}, formData);
        }),
        baseType: schema.type,
        registry,
        schema,
        uiSchema
      })]
    })
  }));
}
var SchemaField = function(_Component) {
  _inheritsLoose(SchemaField2, _Component);
  function SchemaField2() {
    return _Component.apply(this, arguments) || this;
  }
  var _proto = SchemaField2.prototype;
  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    return !deepEquals(this.props, nextProps);
  };
  _proto.render = function render() {
    return (0, import_jsx_runtime.jsx)(SchemaFieldRender, _extends({}, this.props));
  };
  return SchemaField2;
}(import_react.Component);
var _excluded$5 = ["widget", "placeholder", "title"];
function StringField(props) {
  var _ref;
  var schema = props.schema, name = props.name, uiSchema = props.uiSchema, idSchema = props.idSchema, formData = props.formData, required = props.required, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$readonly = props.readonly, readonly = _props$readonly === void 0 ? false : _props$readonly, _props$autofocus = props.autofocus, autofocus = _props$autofocus === void 0 ? false : _props$autofocus, onChange = props.onChange, onBlur = props.onBlur, onFocus = props.onFocus, registry = props.registry, rawErrors = props.rawErrors;
  var title = schema.title, format = schema.format;
  var widgets2 = registry.widgets, formContext = registry.formContext, schemaUtils = registry.schemaUtils, globalUiOptions = registry.globalUiOptions;
  var enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : void 0;
  var defaultWidget = enumOptions ? "select" : "text";
  if (format && hasWidget(schema, format, widgets2)) {
    defaultWidget = format;
  }
  var _getUiOptions = getUiOptions(uiSchema), _getUiOptions$widget = _getUiOptions.widget, widget = _getUiOptions$widget === void 0 ? defaultWidget : _getUiOptions$widget, _getUiOptions$placeho = _getUiOptions.placeholder, placeholder = _getUiOptions$placeho === void 0 ? "" : _getUiOptions$placeho, uiTitle = _getUiOptions.title, options = _objectWithoutPropertiesLoose(_getUiOptions, _excluded$5);
  var displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema, globalUiOptions);
  var label = (_ref = uiTitle != null ? uiTitle : title) != null ? _ref : name;
  var Widget = getWidget(schema, widget, widgets2);
  return (0, import_jsx_runtime.jsx)(Widget, {
    options: _extends({}, options, {
      enumOptions
    }),
    schema,
    uiSchema,
    id: idSchema.$id,
    name,
    label,
    hideLabel: !displayLabel,
    value: formData,
    onChange,
    onBlur,
    onFocus,
    required,
    disabled,
    readonly,
    formContext,
    autofocus,
    registry,
    placeholder,
    rawErrors
  });
}
function NullField(props) {
  var formData = props.formData, onChange = props.onChange;
  (0, import_react.useEffect)(function() {
    if (formData === void 0) {
      onChange(null);
    }
  }, [formData, onChange]);
  return null;
}
function fields() {
  return {
    AnyOfField,
    ArrayField,
    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default
    BooleanField,
    NumberField,
    ObjectField,
    OneOfField: AnyOfField,
    SchemaField,
    StringField,
    NullField
  };
}
function ArrayFieldDescriptionTemplate(props) {
  var idSchema = props.idSchema, description = props.description, registry = props.registry, schema = props.schema, uiSchema = props.uiSchema;
  var options = getUiOptions(uiSchema, registry.globalUiOptions);
  var _options$label = options.label, displayLabel = _options$label === void 0 ? true : _options$label;
  if (!description || !displayLabel) {
    return null;
  }
  var DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(DescriptionFieldTemplate, {
    id: descriptionId(idSchema),
    description,
    schema,
    uiSchema,
    registry
  });
}
function ArrayFieldItemTemplate(props) {
  var children = props.children, className = props.className, disabled = props.disabled, hasToolbar = props.hasToolbar, hasMoveDown = props.hasMoveDown, hasMoveUp = props.hasMoveUp, hasRemove = props.hasRemove, hasCopy = props.hasCopy, index = props.index, onCopyIndexClick = props.onCopyIndexClick, onDropIndexClick = props.onDropIndexClick, onReorderClick = props.onReorderClick, readonly = props.readonly, registry = props.registry, uiSchema = props.uiSchema;
  var _registry$templates$B = registry.templates.ButtonTemplates, CopyButton2 = _registry$templates$B.CopyButton, MoveDownButton2 = _registry$templates$B.MoveDownButton, MoveUpButton2 = _registry$templates$B.MoveUpButton, RemoveButton2 = _registry$templates$B.RemoveButton;
  var btnStyle = {
    flex: 1,
    paddingLeft: 6,
    paddingRight: 6,
    fontWeight: "bold"
  };
  return (0, import_jsx_runtime.jsxs)("div", {
    className,
    children: [(0, import_jsx_runtime.jsx)("div", {
      className: hasToolbar ? "col-xs-9" : "col-xs-12",
      children
    }), hasToolbar && (0, import_jsx_runtime.jsx)("div", {
      className: "col-xs-3 array-item-toolbox",
      children: (0, import_jsx_runtime.jsxs)("div", {
        className: "btn-group",
        style: {
          display: "flex",
          justifyContent: "space-around"
        },
        children: [(hasMoveUp || hasMoveDown) && (0, import_jsx_runtime.jsx)(MoveUpButton2, {
          style: btnStyle,
          disabled: disabled || readonly || !hasMoveUp,
          onClick: onReorderClick(index, index - 1),
          uiSchema,
          registry
        }), (hasMoveUp || hasMoveDown) && (0, import_jsx_runtime.jsx)(MoveDownButton2, {
          style: btnStyle,
          disabled: disabled || readonly || !hasMoveDown,
          onClick: onReorderClick(index, index + 1),
          uiSchema,
          registry
        }), hasCopy && (0, import_jsx_runtime.jsx)(CopyButton2, {
          style: btnStyle,
          disabled: disabled || readonly,
          onClick: onCopyIndexClick(index),
          uiSchema,
          registry
        }), hasRemove && (0, import_jsx_runtime.jsx)(RemoveButton2, {
          style: btnStyle,
          disabled: disabled || readonly,
          onClick: onDropIndexClick(index),
          uiSchema,
          registry
        })]
      })
    })]
  });
}
var _excluded$4 = ["key"];
function ArrayFieldTemplate(props) {
  var canAdd = props.canAdd, className = props.className, disabled = props.disabled, idSchema = props.idSchema, uiSchema = props.uiSchema, items = props.items, onAddClick = props.onAddClick, readonly = props.readonly, registry = props.registry, required = props.required, schema = props.schema, title = props.title;
  var uiOptions = getUiOptions(uiSchema);
  var ArrayFieldDescriptionTemplate2 = getTemplate("ArrayFieldDescriptionTemplate", registry, uiOptions);
  var ArrayFieldItemTemplate2 = getTemplate("ArrayFieldItemTemplate", registry, uiOptions);
  var ArrayFieldTitleTemplate2 = getTemplate("ArrayFieldTitleTemplate", registry, uiOptions);
  var AddButton2 = registry.templates.ButtonTemplates.AddButton;
  return (0, import_jsx_runtime.jsxs)("fieldset", {
    className,
    id: idSchema.$id,
    children: [(0, import_jsx_runtime.jsx)(ArrayFieldTitleTemplate2, {
      idSchema,
      title: uiOptions.title || title,
      required,
      schema,
      uiSchema,
      registry
    }), (0, import_jsx_runtime.jsx)(ArrayFieldDescriptionTemplate2, {
      idSchema,
      description: uiOptions.description || schema.description,
      schema,
      uiSchema,
      registry
    }), (0, import_jsx_runtime.jsx)("div", {
      className: "row array-item-list",
      children: items && items.map(function(_ref) {
        var key = _ref.key, itemProps = _objectWithoutPropertiesLoose(_ref, _excluded$4);
        return (0, import_jsx_runtime.jsx)(ArrayFieldItemTemplate2, _extends({}, itemProps), key);
      })
    }), canAdd && (0, import_jsx_runtime.jsx)(AddButton2, {
      className: "array-item-add",
      onClick: onAddClick,
      disabled: disabled || readonly,
      uiSchema,
      registry
    })]
  });
}
function ArrayFieldTitleTemplate(props) {
  var idSchema = props.idSchema, title = props.title, schema = props.schema, uiSchema = props.uiSchema, required = props.required, registry = props.registry;
  var options = getUiOptions(uiSchema, registry.globalUiOptions);
  var _options$label = options.label, displayLabel = _options$label === void 0 ? true : _options$label;
  if (!title || !displayLabel) {
    return null;
  }
  var TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(TitleFieldTemplate, {
    id: titleId(idSchema),
    title,
    required,
    schema,
    uiSchema,
    registry
  });
}
var _excluded$3 = ["id", "name", "value", "readonly", "disabled", "autofocus", "onBlur", "onFocus", "onChange", "onChangeOverride", "options", "schema", "uiSchema", "formContext", "registry", "rawErrors", "type", "hideLabel", "hideError"];
function BaseInputTemplate(props) {
  var id = props.id, value = props.value, readonly = props.readonly, disabled = props.disabled, autofocus = props.autofocus, onBlur = props.onBlur, onFocus = props.onFocus, onChange = props.onChange, onChangeOverride = props.onChangeOverride, options = props.options, schema = props.schema, type = props.type, rest = _objectWithoutPropertiesLoose(props, _excluded$3);
  if (!id) {
    console.log("No id for", props);
    throw new Error("no id for props " + JSON.stringify(props));
  }
  var inputProps = _extends({}, rest, getInputProps(schema, type, options));
  var inputValue;
  if (inputProps.type === "number" || inputProps.type === "integer") {
    inputValue = value || value === 0 ? value : "";
  } else {
    inputValue = value == null ? "" : value;
  }
  var _onChange = (0, import_react.useCallback)(function(_ref) {
    var value2 = _ref.target.value;
    return onChange(value2 === "" ? options.emptyValue : value2);
  }, [onChange, options]);
  var _onBlur = (0, import_react.useCallback)(function(_ref2) {
    var value2 = _ref2.target.value;
    return onBlur(id, value2);
  }, [onBlur, id]);
  var _onFocus = (0, import_react.useCallback)(function(_ref3) {
    var value2 = _ref3.target.value;
    return onFocus(id, value2);
  }, [onFocus, id]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [(0, import_jsx_runtime.jsx)("input", _extends({
      id,
      name: id,
      className: "form-control",
      readOnly: readonly,
      disabled,
      autoFocus: autofocus,
      value: inputValue
    }, inputProps, {
      list: schema.examples ? examplesId(id) : void 0,
      onChange: onChangeOverride || _onChange,
      onBlur: _onBlur,
      onFocus: _onFocus,
      "aria-describedby": ariaDescribedByIds(id, !!schema.examples)
    })), Array.isArray(schema.examples) && (0, import_jsx_runtime.jsx)("datalist", {
      id: examplesId(id),
      children: schema.examples.concat(schema["default"] && !schema.examples.includes(schema["default"]) ? [schema["default"]] : []).map(function(example) {
        return (0, import_jsx_runtime.jsx)("option", {
          value: example
        }, example);
      })
    }, "datalist_" + id)]
  });
}
function SubmitButton(_ref) {
  var uiSchema = _ref.uiSchema;
  var _getSubmitButtonOptio = getSubmitButtonOptions(uiSchema), submitText = _getSubmitButtonOptio.submitText, norender = _getSubmitButtonOptio.norender, _getSubmitButtonOptio2 = _getSubmitButtonOptio.props, submitButtonProps = _getSubmitButtonOptio2 === void 0 ? {} : _getSubmitButtonOptio2;
  if (norender) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)("div", {
    children: (0, import_jsx_runtime.jsx)("button", _extends({
      type: "submit"
    }, submitButtonProps, {
      className: "btn btn-info " + (submitButtonProps.className || ""),
      children: submitText
    }))
  });
}
var _excluded$2 = ["iconType", "icon", "className", "uiSchema", "registry"];
function IconButton(props) {
  var _props$iconType = props.iconType, iconType = _props$iconType === void 0 ? "default" : _props$iconType, icon = props.icon, className = props.className, otherProps = _objectWithoutPropertiesLoose(props, _excluded$2);
  return (0, import_jsx_runtime.jsx)("button", _extends({
    type: "button",
    className: "btn btn-" + iconType + " " + className
  }, otherProps, {
    children: (0, import_jsx_runtime.jsx)("i", {
      className: "glyphicon glyphicon-" + icon
    })
  }));
}
function CopyButton(props) {
  var translateString = props.registry.translateString;
  return (0, import_jsx_runtime.jsx)(IconButton, _extends({
    title: translateString(TranslatableString.CopyButton),
    className: "array-item-copy"
  }, props, {
    icon: "copy"
  }));
}
function MoveDownButton(props) {
  var translateString = props.registry.translateString;
  return (0, import_jsx_runtime.jsx)(IconButton, _extends({
    title: translateString(TranslatableString.MoveDownButton),
    className: "array-item-move-down"
  }, props, {
    icon: "arrow-down"
  }));
}
function MoveUpButton(props) {
  var translateString = props.registry.translateString;
  return (0, import_jsx_runtime.jsx)(IconButton, _extends({
    title: translateString(TranslatableString.MoveUpButton),
    className: "array-item-move-up"
  }, props, {
    icon: "arrow-up"
  }));
}
function RemoveButton(props) {
  var translateString = props.registry.translateString;
  return (0, import_jsx_runtime.jsx)(IconButton, _extends({
    title: translateString(TranslatableString.RemoveButton),
    className: "array-item-remove"
  }, props, {
    iconType: "danger",
    icon: "remove"
  }));
}
function AddButton(_ref) {
  var className = _ref.className, onClick = _ref.onClick, disabled = _ref.disabled, registry = _ref.registry;
  var translateString = registry.translateString;
  return (0, import_jsx_runtime.jsx)("div", {
    className: "row",
    children: (0, import_jsx_runtime.jsx)("p", {
      className: "col-xs-3 col-xs-offset-9 text-right " + className,
      children: (0, import_jsx_runtime.jsx)(IconButton, {
        iconType: "info",
        icon: "plus",
        className: "btn-add col-xs-12",
        title: translateString(TranslatableString.AddButton),
        onClick,
        disabled,
        registry
      })
    })
  });
}
function buttonTemplates() {
  return {
    SubmitButton,
    AddButton,
    CopyButton,
    MoveDownButton,
    MoveUpButton,
    RemoveButton
  };
}
function DescriptionField(props) {
  var id = props.id, description = props.description;
  if (!description) {
    return null;
  }
  if (typeof description === "string") {
    return (0, import_jsx_runtime.jsx)("p", {
      id,
      className: "field-description",
      children: description
    });
  } else {
    return (0, import_jsx_runtime.jsx)("div", {
      id,
      className: "field-description",
      children: description
    });
  }
}
function ErrorList(_ref) {
  var errors = _ref.errors, registry = _ref.registry;
  var translateString = registry.translateString;
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "panel panel-danger errors",
    children: [(0, import_jsx_runtime.jsx)("div", {
      className: "panel-heading",
      children: (0, import_jsx_runtime.jsx)("h3", {
        className: "panel-title",
        children: translateString(TranslatableString.ErrorsLabel)
      })
    }), (0, import_jsx_runtime.jsx)("ul", {
      className: "list-group",
      children: errors.map(function(error, i2) {
        return (0, import_jsx_runtime.jsx)("li", {
          className: "list-group-item text-danger",
          children: error.stack
        }, i2);
      })
    })]
  });
}
var REQUIRED_FIELD_SYMBOL$1 = "*";
function Label(props) {
  var label = props.label, required = props.required, id = props.id;
  if (!label) {
    return null;
  }
  return (0, import_jsx_runtime.jsxs)("label", {
    className: "control-label",
    htmlFor: id,
    children: [label, required && (0, import_jsx_runtime.jsx)("span", {
      className: "required",
      children: REQUIRED_FIELD_SYMBOL$1
    })]
  });
}
function FieldTemplate(props) {
  var id = props.id, label = props.label, children = props.children, errors = props.errors, help = props.help, description = props.description, hidden = props.hidden, required = props.required, displayLabel = props.displayLabel, registry = props.registry, uiSchema = props.uiSchema;
  var uiOptions = getUiOptions(uiSchema);
  var WrapIfAdditionalTemplate2 = getTemplate("WrapIfAdditionalTemplate", registry, uiOptions);
  if (hidden) {
    return (0, import_jsx_runtime.jsx)("div", {
      className: "hidden",
      children
    });
  }
  return (0, import_jsx_runtime.jsxs)(WrapIfAdditionalTemplate2, _extends({}, props, {
    children: [displayLabel && (0, import_jsx_runtime.jsx)(Label, {
      label,
      required,
      id
    }), displayLabel && description ? description : null, children, errors, help]
  }));
}
function FieldErrorTemplate(props) {
  var _props$errors = props.errors, errors = _props$errors === void 0 ? [] : _props$errors, idSchema = props.idSchema;
  if (errors.length === 0) {
    return null;
  }
  var id = errorId(idSchema);
  return (0, import_jsx_runtime.jsx)("div", {
    children: (0, import_jsx_runtime.jsx)("ul", {
      id,
      className: "error-detail bs-callout bs-callout-info",
      children: errors.filter(function(elem) {
        return !!elem;
      }).map(function(error, index) {
        return (0, import_jsx_runtime.jsx)("li", {
          className: "text-danger",
          children: error
        }, index);
      })
    })
  });
}
function FieldHelpTemplate(props) {
  var idSchema = props.idSchema, help = props.help;
  if (!help) {
    return null;
  }
  var id = helpId(idSchema);
  if (typeof help === "string") {
    return (0, import_jsx_runtime.jsx)("p", {
      id,
      className: "help-block",
      children: help
    });
  }
  return (0, import_jsx_runtime.jsx)("div", {
    id,
    className: "help-block",
    children: help
  });
}
function ObjectFieldTemplate(props) {
  var description = props.description, disabled = props.disabled, formData = props.formData, idSchema = props.idSchema, onAddClick = props.onAddClick, properties = props.properties, readonly = props.readonly, registry = props.registry, required = props.required, schema = props.schema, title = props.title, uiSchema = props.uiSchema;
  var options = getUiOptions(uiSchema);
  var TitleFieldTemplate = getTemplate("TitleFieldTemplate", registry, options);
  var DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
  var AddButton2 = registry.templates.ButtonTemplates.AddButton;
  return (0, import_jsx_runtime.jsxs)("fieldset", {
    id: idSchema.$id,
    children: [title && (0, import_jsx_runtime.jsx)(TitleFieldTemplate, {
      id: titleId(idSchema),
      title,
      required,
      schema,
      uiSchema,
      registry
    }), description && (0, import_jsx_runtime.jsx)(DescriptionFieldTemplate, {
      id: descriptionId(idSchema),
      description,
      schema,
      uiSchema,
      registry
    }), properties.map(function(prop) {
      return prop.content;
    }), canExpand(schema, uiSchema, formData) && (0, import_jsx_runtime.jsx)(AddButton2, {
      className: "object-property-expand",
      onClick: onAddClick(schema),
      disabled: disabled || readonly,
      uiSchema,
      registry
    })]
  });
}
var REQUIRED_FIELD_SYMBOL = "*";
function TitleField(props) {
  var id = props.id, title = props.title, required = props.required;
  return (0, import_jsx_runtime.jsxs)("legend", {
    id,
    children: [title, required && (0, import_jsx_runtime.jsx)("span", {
      className: "required",
      children: REQUIRED_FIELD_SYMBOL
    })]
  });
}
function UnsupportedField(props) {
  var schema = props.schema, idSchema = props.idSchema, reason = props.reason, registry = props.registry;
  var translateString = registry.translateString;
  var translateEnum = TranslatableString.UnsupportedField;
  var translateParams = [];
  if (idSchema && idSchema.$id) {
    translateEnum = TranslatableString.UnsupportedFieldWithId;
    translateParams.push(idSchema.$id);
  }
  if (reason) {
    translateEnum = translateEnum === TranslatableString.UnsupportedField ? TranslatableString.UnsupportedFieldWithReason : TranslatableString.UnsupportedFieldWithIdAndReason;
    translateParams.push(reason);
  }
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "unsupported-field",
    children: [(0, import_jsx_runtime.jsx)("p", {
      children: (0, import_jsx_runtime.jsx)(index_modern_default, {
        children: translateString(translateEnum, translateParams)
      })
    }), schema && (0, import_jsx_runtime.jsx)("pre", {
      children: JSON.stringify(schema, null, 2)
    })]
  });
}
function WrapIfAdditionalTemplate(props) {
  var id = props.id, classNames = props.classNames, style = props.style, disabled = props.disabled, label = props.label, onKeyChange = props.onKeyChange, onDropPropertyClick = props.onDropPropertyClick, readonly = props.readonly, required = props.required, schema = props.schema, children = props.children, uiSchema = props.uiSchema, registry = props.registry;
  var templates2 = registry.templates, translateString = registry.translateString;
  var RemoveButton2 = templates2.ButtonTemplates.RemoveButton;
  var keyLabel = translateString(TranslatableString.KeyLabel, [label]);
  var additional = ADDITIONAL_PROPERTY_FLAG in schema;
  if (!additional) {
    return (0, import_jsx_runtime.jsx)("div", {
      className: classNames,
      style,
      children
    });
  }
  return (0, import_jsx_runtime.jsx)("div", {
    className: classNames,
    style,
    children: (0, import_jsx_runtime.jsxs)("div", {
      className: "row",
      children: [(0, import_jsx_runtime.jsx)("div", {
        className: "col-xs-5 form-additional",
        children: (0, import_jsx_runtime.jsxs)("div", {
          className: "form-group",
          children: [(0, import_jsx_runtime.jsx)(Label, {
            label: keyLabel,
            required,
            id: id + "-key"
          }), (0, import_jsx_runtime.jsx)("input", {
            className: "form-control",
            type: "text",
            id: id + "-key",
            onBlur: function onBlur(event) {
              return onKeyChange(event.target.value);
            },
            defaultValue: label
          })]
        })
      }), (0, import_jsx_runtime.jsx)("div", {
        className: "form-additional form-group col-xs-5",
        children
      }), (0, import_jsx_runtime.jsx)("div", {
        className: "col-xs-2",
        children: (0, import_jsx_runtime.jsx)(RemoveButton2, {
          className: "array-item-remove btn-block",
          style: {
            border: "0"
          },
          disabled: disabled || readonly,
          onClick: onDropPropertyClick(label),
          uiSchema,
          registry
        })
      })]
    })
  });
}
function templates() {
  return {
    ArrayFieldDescriptionTemplate,
    ArrayFieldItemTemplate,
    ArrayFieldTemplate,
    ArrayFieldTitleTemplate,
    ButtonTemplates: buttonTemplates(),
    BaseInputTemplate,
    DescriptionFieldTemplate: DescriptionField,
    ErrorListTemplate: ErrorList,
    FieldTemplate,
    FieldErrorTemplate,
    FieldHelpTemplate,
    ObjectFieldTemplate,
    TitleFieldTemplate: TitleField,
    UnsupportedFieldTemplate: UnsupportedField,
    WrapIfAdditionalTemplate
  };
}
function rangeOptions(start, stop) {
  var options = [];
  for (var i2 = start; i2 <= stop; i2++) {
    options.push({
      value: i2,
      label: pad(i2, 2)
    });
  }
  return options;
}
function readyForChange(state) {
  return Object.values(state).every(function(value) {
    return value !== -1;
  });
}
function dateElementProps(state, time, yearsRange) {
  if (yearsRange === void 0) {
    yearsRange = [1900, (/* @__PURE__ */ new Date()).getFullYear() + 2];
  }
  var year = state.year, month = state.month, day = state.day, hour = state.hour, minute = state.minute, second = state.second;
  var data = [{
    type: "year",
    range: yearsRange,
    value: year
  }, {
    type: "month",
    range: [1, 12],
    value: month
  }, {
    type: "day",
    range: [1, 31],
    value: day
  }];
  if (time) {
    data.push({
      type: "hour",
      range: [0, 23],
      value: hour
    }, {
      type: "minute",
      range: [0, 59],
      value: minute
    }, {
      type: "second",
      range: [0, 59],
      value: second
    });
  }
  return data;
}
function DateElement(_ref) {
  var type = _ref.type, range = _ref.range, value = _ref.value, select = _ref.select, rootId = _ref.rootId, name = _ref.name, disabled = _ref.disabled, readonly = _ref.readonly, autofocus = _ref.autofocus, registry = _ref.registry, onBlur = _ref.onBlur, onFocus = _ref.onFocus;
  var id = rootId + "_" + type;
  var SelectWidget2 = registry.widgets.SelectWidget;
  return (0, import_jsx_runtime.jsx)(SelectWidget2, {
    schema: {
      type: "integer"
    },
    id,
    name,
    className: "form-control",
    options: {
      enumOptions: rangeOptions(range[0], range[1])
    },
    placeholder: type,
    value,
    disabled,
    readonly,
    autofocus,
    onChange: function onChange(value2) {
      return select(type, value2);
    },
    onBlur,
    onFocus,
    registry,
    label: "",
    "aria-describedby": ariaDescribedByIds(rootId)
  });
}
function AltDateWidget(_ref2) {
  var _ref2$time = _ref2.time, time = _ref2$time === void 0 ? false : _ref2$time, _ref2$disabled = _ref2.disabled, disabled = _ref2$disabled === void 0 ? false : _ref2$disabled, _ref2$readonly = _ref2.readonly, readonly = _ref2$readonly === void 0 ? false : _ref2$readonly, _ref2$autofocus = _ref2.autofocus, autofocus = _ref2$autofocus === void 0 ? false : _ref2$autofocus, options = _ref2.options, id = _ref2.id, name = _ref2.name, registry = _ref2.registry, onBlur = _ref2.onBlur, onFocus = _ref2.onFocus, onChange = _ref2.onChange, value = _ref2.value;
  var translateString = registry.translateString;
  var _useState = (0, import_react.useState)(value), lastValue = _useState[0], setLastValue = _useState[1];
  var _useReducer = (0, import_react.useReducer)(function(state2, action) {
    return _extends({}, state2, action);
  }, parseDateString(value, time)), state = _useReducer[0], setState = _useReducer[1];
  (0, import_react.useEffect)(function() {
    var stateValue = toDateString(state, time);
    if (readyForChange(state) && stateValue !== value) {
      onChange(stateValue);
    } else if (lastValue !== value) {
      setLastValue(value);
      setState(parseDateString(value, time));
    }
  }, [time, value, onChange, state, lastValue]);
  var handleChange = (0, import_react.useCallback)(function(property, value2) {
    var _setState;
    setState((_setState = {}, _setState[property] = value2, _setState));
  }, []);
  var handleSetNow = (0, import_react.useCallback)(function(event) {
    event.preventDefault();
    if (disabled || readonly) {
      return;
    }
    var nextState = parseDateString((/* @__PURE__ */ new Date()).toJSON(), time);
    onChange(toDateString(nextState, time));
  }, [disabled, readonly, time]);
  var handleClear = (0, import_react.useCallback)(function(event) {
    event.preventDefault();
    if (disabled || readonly) {
      return;
    }
    onChange(void 0);
  }, [disabled, readonly, onChange]);
  return (0, import_jsx_runtime.jsxs)("ul", {
    className: "list-inline",
    children: [dateElementProps(state, time, options.yearsRange).map(function(elemProps, i2) {
      return (0, import_jsx_runtime.jsx)("li", {
        className: "list-inline-item",
        children: (0, import_jsx_runtime.jsx)(DateElement, _extends({
          rootId: id,
          name,
          select: handleChange
        }, elemProps, {
          disabled,
          readonly,
          registry,
          onBlur,
          onFocus,
          autofocus: autofocus && i2 === 0
        }))
      }, i2);
    }), (options.hideNowButton !== "undefined" ? !options.hideNowButton : true) && (0, import_jsx_runtime.jsx)("li", {
      className: "list-inline-item",
      children: (0, import_jsx_runtime.jsx)("a", {
        href: "#",
        className: "btn btn-info btn-now",
        onClick: handleSetNow,
        children: translateString(TranslatableString.NowLabel)
      })
    }), (options.hideClearButton !== "undefined" ? !options.hideClearButton : true) && (0, import_jsx_runtime.jsx)("li", {
      className: "list-inline-item",
      children: (0, import_jsx_runtime.jsx)("a", {
        href: "#",
        className: "btn btn-warning btn-clear",
        onClick: handleClear,
        children: translateString(TranslatableString.ClearLabel)
      })
    })]
  });
}
var _excluded$1 = ["time"];
function AltDateTimeWidget(_ref) {
  var _ref$time = _ref.time, time = _ref$time === void 0 ? true : _ref$time, props = _objectWithoutPropertiesLoose(_ref, _excluded$1);
  var AltDateWidget2 = props.registry.widgets.AltDateWidget;
  return (0, import_jsx_runtime.jsx)(AltDateWidget2, _extends({
    time
  }, props));
}
function CheckboxWidget(_ref) {
  var _options$description;
  var schema = _ref.schema, uiSchema = _ref.uiSchema, options = _ref.options, id = _ref.id, value = _ref.value, disabled = _ref.disabled, readonly = _ref.readonly, label = _ref.label, hideLabel = _ref.hideLabel, _ref$autofocus = _ref.autofocus, autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus, onBlur = _ref.onBlur, onFocus = _ref.onFocus, onChange = _ref.onChange, registry = _ref.registry;
  var DescriptionFieldTemplate = getTemplate("DescriptionFieldTemplate", registry, options);
  var required = schemaRequiresTrueValue(schema);
  var handleChange = (0, import_react.useCallback)(function(event) {
    return onChange(event.target.checked);
  }, [onChange]);
  var handleBlur = (0, import_react.useCallback)(function(event) {
    return onBlur(id, event.target.checked);
  }, [onBlur, id]);
  var handleFocus = (0, import_react.useCallback)(function(event) {
    return onFocus(id, event.target.checked);
  }, [onFocus, id]);
  var description = (_options$description = options.description) != null ? _options$description : schema.description;
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "checkbox " + (disabled || readonly ? "disabled" : ""),
    children: [!hideLabel && !!description && (0, import_jsx_runtime.jsx)(DescriptionFieldTemplate, {
      id: descriptionId(id),
      description,
      schema,
      uiSchema,
      registry
    }), (0, import_jsx_runtime.jsxs)("label", {
      children: [(0, import_jsx_runtime.jsx)("input", {
        type: "checkbox",
        id,
        name: id,
        checked: typeof value === "undefined" ? false : value,
        required,
        disabled: disabled || readonly,
        autoFocus: autofocus,
        onChange: handleChange,
        onBlur: handleBlur,
        onFocus: handleFocus,
        "aria-describedby": ariaDescribedByIds(id)
      }), labelValue((0, import_jsx_runtime.jsx)("span", {
        children: label
      }), hideLabel)]
    })]
  });
}
function CheckboxesWidget(_ref) {
  var id = _ref.id, disabled = _ref.disabled, _ref$options = _ref.options, _ref$options$inline = _ref$options.inline, inline = _ref$options$inline === void 0 ? false : _ref$options$inline, enumOptions = _ref$options.enumOptions, enumDisabled = _ref$options.enumDisabled, emptyValue = _ref$options.emptyValue, value = _ref.value, _ref$autofocus = _ref.autofocus, autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus, readonly = _ref.readonly, onChange = _ref.onChange, onBlur = _ref.onBlur, onFocus = _ref.onFocus;
  var checkboxesValues = Array.isArray(value) ? value : [value];
  var handleBlur = (0, import_react.useCallback)(function(_ref2) {
    var value2 = _ref2.target.value;
    return onBlur(id, enumOptionsValueForIndex(value2, enumOptions, emptyValue));
  }, [onBlur, id]);
  var handleFocus = (0, import_react.useCallback)(function(_ref3) {
    var value2 = _ref3.target.value;
    return onFocus(id, enumOptionsValueForIndex(value2, enumOptions, emptyValue));
  }, [onFocus, id]);
  return (0, import_jsx_runtime.jsx)("div", {
    className: "checkboxes",
    id,
    children: Array.isArray(enumOptions) && enumOptions.map(function(option, index) {
      var checked = enumOptionsIsSelected(option.value, checkboxesValues);
      var itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      var handleChange = function handleChange2(event) {
        if (event.target.checked) {
          onChange(enumOptionsSelectValue(index, checkboxesValues, enumOptions));
        } else {
          onChange(enumOptionsDeselectValue(index, checkboxesValues, enumOptions));
        }
      };
      var checkbox = (0, import_jsx_runtime.jsxs)("span", {
        children: [(0, import_jsx_runtime.jsx)("input", {
          type: "checkbox",
          id: optionId(id, index),
          name: id,
          checked,
          value: String(index),
          disabled: disabled || itemDisabled || readonly,
          autoFocus: autofocus && index === 0,
          onChange: handleChange,
          onBlur: handleBlur,
          onFocus: handleFocus,
          "aria-describedby": ariaDescribedByIds(id)
        }), (0, import_jsx_runtime.jsx)("span", {
          children: option.label
        })]
      });
      return inline ? (0, import_jsx_runtime.jsx)("label", {
        className: "checkbox-inline " + disabledCls,
        children: checkbox
      }, index) : (0, import_jsx_runtime.jsx)("div", {
        className: "checkbox " + disabledCls,
        children: (0, import_jsx_runtime.jsx)("label", {
          children: checkbox
        })
      }, index);
    })
  });
}
function ColorWidget(props) {
  var disabled = props.disabled, readonly = props.readonly, options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "color"
  }, props, {
    disabled: disabled || readonly
  }));
}
function DateWidget(props) {
  var onChange = props.onChange, options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  var handleChange = (0, import_react.useCallback)(function(value) {
    return onChange(value || void 0);
  }, [onChange]);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "date"
  }, props, {
    onChange: handleChange
  }));
}
function DateTimeWidget(props) {
  var _onChange = props.onChange, value = props.value, options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "datetime-local"
  }, props, {
    value: utcToLocal(value),
    onChange: function onChange(value2) {
      return _onChange(localToUTC(value2));
    }
  }));
}
function EmailWidget(props) {
  var options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "email"
  }, props));
}
function addNameToDataURL(dataURL, name) {
  if (dataURL === null) {
    return null;
  }
  return dataURL.replace(";base64", ";name=" + encodeURIComponent(name) + ";base64");
}
function processFile(file) {
  var name = file.name, size = file.size, type = file.type;
  return new Promise(function(resolve, reject) {
    var reader = new window.FileReader();
    reader.onerror = reject;
    reader.onload = function(event) {
      var _event$target;
      if (typeof ((_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result) === "string") {
        resolve({
          dataURL: addNameToDataURL(event.target.result, name),
          name,
          size,
          type
        });
      } else {
        resolve({
          dataURL: null,
          name,
          size,
          type
        });
      }
    };
    reader.readAsDataURL(file);
  });
}
function processFiles(files) {
  return Promise.all(Array.from(files).map(processFile));
}
function FileInfoPreview(_ref) {
  var fileInfo = _ref.fileInfo, registry = _ref.registry;
  var translateString = registry.translateString;
  var dataURL = fileInfo.dataURL, type = fileInfo.type, name = fileInfo.name;
  if (!dataURL) {
    return null;
  }
  if (type.indexOf("image") !== -1) {
    return (0, import_jsx_runtime.jsx)("img", {
      src: dataURL,
      style: {
        maxWidth: "100%"
      },
      className: "file-preview"
    });
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [" ", (0, import_jsx_runtime.jsx)("a", {
      download: "preview-" + name,
      href: dataURL,
      className: "file-download",
      children: translateString(TranslatableString.PreviewLabel)
    })]
  });
}
function FilesInfo(_ref2) {
  var filesInfo = _ref2.filesInfo, registry = _ref2.registry, preview = _ref2.preview;
  if (filesInfo.length === 0) {
    return null;
  }
  var translateString = registry.translateString;
  return (0, import_jsx_runtime.jsx)("ul", {
    className: "file-info",
    children: filesInfo.map(function(fileInfo, key) {
      var name = fileInfo.name, size = fileInfo.size, type = fileInfo.type;
      return (0, import_jsx_runtime.jsxs)("li", {
        children: [(0, import_jsx_runtime.jsx)(index_modern_default, {
          children: translateString(TranslatableString.FilesInfo, [name, type, String(size)])
        }), preview && (0, import_jsx_runtime.jsx)(FileInfoPreview, {
          fileInfo,
          registry
        })]
      }, key);
    })
  });
}
function extractFileInfo(dataURLs) {
  return dataURLs.filter(function(dataURL) {
    return dataURL;
  }).map(function(dataURL) {
    var _dataURItoBlob = dataURItoBlob(dataURL), blob = _dataURItoBlob.blob, name = _dataURItoBlob.name;
    return {
      dataURL,
      name,
      size: blob.size,
      type: blob.type
    };
  });
}
function FileWidget(props) {
  var disabled = props.disabled, readonly = props.readonly, required = props.required, multiple = props.multiple, onChange = props.onChange, value = props.value, options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  var extractedFilesInfo = (0, import_react.useMemo)(function() {
    return Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]);
  }, [value]);
  var _useState = (0, import_react.useState)(extractedFilesInfo), filesInfo = _useState[0], setFilesInfo = _useState[1];
  var handleChange = (0, import_react.useCallback)(function(event) {
    if (!event.target.files) {
      return;
    }
    processFiles(event.target.files).then(function(filesInfoEvent) {
      setFilesInfo(filesInfoEvent);
      var newValue = filesInfoEvent.map(function(fileInfo) {
        return fileInfo.dataURL;
      });
      if (multiple) {
        onChange(newValue);
      } else {
        onChange(newValue[0]);
      }
    });
  }, [multiple, onChange]);
  return (0, import_jsx_runtime.jsxs)("div", {
    children: [(0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({}, props, {
      disabled: disabled || readonly,
      type: "file",
      required: value ? false : required,
      onChangeOverride: handleChange,
      value: "",
      accept: options.accept ? String(options.accept) : void 0
    })), (0, import_jsx_runtime.jsx)(FilesInfo, {
      filesInfo,
      registry,
      preview: options.filePreview
    })]
  });
}
function HiddenWidget(_ref) {
  var id = _ref.id, value = _ref.value;
  return (0, import_jsx_runtime.jsx)("input", {
    type: "hidden",
    id,
    name: id,
    value: typeof value === "undefined" ? "" : value
  });
}
function PasswordWidget(props) {
  var options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "password"
  }, props));
}
function RadioWidget(_ref) {
  var options = _ref.options, value = _ref.value, required = _ref.required, disabled = _ref.disabled, readonly = _ref.readonly, _ref$autofocus = _ref.autofocus, autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus, onBlur = _ref.onBlur, onFocus = _ref.onFocus, onChange = _ref.onChange, id = _ref.id;
  var enumOptions = options.enumOptions, enumDisabled = options.enumDisabled, inline = options.inline, emptyValue = options.emptyValue;
  var handleBlur = (0, import_react.useCallback)(function(_ref2) {
    var value2 = _ref2.target.value;
    return onBlur(id, enumOptionsValueForIndex(value2, enumOptions, emptyValue));
  }, [onBlur, id]);
  var handleFocus = (0, import_react.useCallback)(function(_ref3) {
    var value2 = _ref3.target.value;
    return onFocus(id, enumOptionsValueForIndex(value2, enumOptions, emptyValue));
  }, [onFocus, id]);
  return (0, import_jsx_runtime.jsx)("div", {
    className: "field-radio-group",
    id,
    children: Array.isArray(enumOptions) && enumOptions.map(function(option, i2) {
      var checked = enumOptionsIsSelected(option.value, value);
      var itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;
      var disabledCls = disabled || itemDisabled || readonly ? "disabled" : "";
      var handleChange = function handleChange2() {
        return onChange(option.value);
      };
      var radio = (0, import_jsx_runtime.jsxs)("span", {
        children: [(0, import_jsx_runtime.jsx)("input", {
          type: "radio",
          id: optionId(id, i2),
          checked,
          name: id,
          required,
          value: String(i2),
          disabled: disabled || itemDisabled || readonly,
          autoFocus: autofocus && i2 === 0,
          onChange: handleChange,
          onBlur: handleBlur,
          onFocus: handleFocus,
          "aria-describedby": ariaDescribedByIds(id)
        }), (0, import_jsx_runtime.jsx)("span", {
          children: option.label
        })]
      });
      return inline ? (0, import_jsx_runtime.jsx)("label", {
        className: "radio-inline " + disabledCls,
        children: radio
      }, i2) : (0, import_jsx_runtime.jsx)("div", {
        className: "radio " + disabledCls,
        children: (0, import_jsx_runtime.jsx)("label", {
          children: radio
        })
      }, i2);
    })
  });
}
function RangeWidget(props) {
  var value = props.value, BaseInputTemplate2 = props.registry.templates.BaseInputTemplate;
  return (0, import_jsx_runtime.jsxs)("div", {
    className: "field-range-wrapper",
    children: [(0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
      type: "range"
    }, props)), (0, import_jsx_runtime.jsx)("span", {
      className: "range-view",
      children: value
    })]
  });
}
function getValue(event, multiple) {
  if (multiple) {
    return Array.from(event.target.options).slice().filter(function(o2) {
      return o2.selected;
    }).map(function(o2) {
      return o2.value;
    });
  }
  return event.target.value;
}
function SelectWidget(_ref) {
  var schema = _ref.schema, id = _ref.id, options = _ref.options, value = _ref.value, required = _ref.required, disabled = _ref.disabled, readonly = _ref.readonly, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple, _ref$autofocus = _ref.autofocus, autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus, onChange = _ref.onChange, onBlur = _ref.onBlur, onFocus = _ref.onFocus, placeholder = _ref.placeholder;
  var enumOptions = options.enumOptions, enumDisabled = options.enumDisabled, optEmptyVal = options.emptyValue;
  var emptyValue = multiple ? [] : "";
  var handleFocus = (0, import_react.useCallback)(function(event) {
    var newValue = getValue(event, multiple);
    return onFocus(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));
  }, [onFocus, id, schema, multiple, options]);
  var handleBlur = (0, import_react.useCallback)(function(event) {
    var newValue = getValue(event, multiple);
    return onBlur(id, enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));
  }, [onBlur, id, schema, multiple, options]);
  var handleChange = (0, import_react.useCallback)(function(event) {
    var newValue = getValue(event, multiple);
    return onChange(enumOptionsValueForIndex(newValue, enumOptions, optEmptyVal));
  }, [onChange, schema, multiple, options]);
  var selectedIndexes = enumOptionsIndexForValue(value, enumOptions, multiple);
  return (0, import_jsx_runtime.jsxs)("select", {
    id,
    name: id,
    multiple,
    className: "form-control",
    value: typeof selectedIndexes === "undefined" ? emptyValue : selectedIndexes,
    required,
    disabled: disabled || readonly,
    autoFocus: autofocus,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onChange: handleChange,
    "aria-describedby": ariaDescribedByIds(id),
    children: [!multiple && schema["default"] === void 0 && (0, import_jsx_runtime.jsx)("option", {
      value: "",
      children: placeholder
    }), Array.isArray(enumOptions) && enumOptions.map(function(_ref2, i2) {
      var value2 = _ref2.value, label = _ref2.label;
      var disabled2 = enumDisabled && enumDisabled.indexOf(value2) !== -1;
      return (0, import_jsx_runtime.jsx)("option", {
        value: String(i2),
        disabled: disabled2,
        children: label
      }, i2);
    })]
  });
}
function TextareaWidget(_ref) {
  var id = _ref.id, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, placeholder = _ref.placeholder, value = _ref.value, required = _ref.required, disabled = _ref.disabled, readonly = _ref.readonly, _ref$autofocus = _ref.autofocus, autofocus = _ref$autofocus === void 0 ? false : _ref$autofocus, onChange = _ref.onChange, onBlur = _ref.onBlur, onFocus = _ref.onFocus;
  var handleChange = (0, import_react.useCallback)(function(_ref2) {
    var value2 = _ref2.target.value;
    return onChange(value2 === "" ? options.emptyValue : value2);
  }, [onChange, options.emptyValue]);
  var handleBlur = (0, import_react.useCallback)(function(_ref3) {
    var value2 = _ref3.target.value;
    return onBlur(id, value2);
  }, [onBlur, id]);
  var handleFocus = (0, import_react.useCallback)(function(_ref4) {
    var value2 = _ref4.target.value;
    return onFocus(id, value2);
  }, [id, onFocus]);
  return (0, import_jsx_runtime.jsx)("textarea", {
    id,
    name: id,
    className: "form-control",
    value: value ? value : "",
    placeholder,
    required,
    disabled,
    readOnly: readonly,
    autoFocus: autofocus,
    rows: options.rows,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onChange: handleChange,
    "aria-describedby": ariaDescribedByIds(id)
  });
}
TextareaWidget.defaultProps = {
  autofocus: false,
  options: {}
};
function TextWidget(props) {
  var options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({}, props));
}
function TimeWidget(props) {
  var onChange = props.onChange, options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  var handleChange = (0, import_react.useCallback)(function(value) {
    return onChange(value ? value + ":00" : void 0);
  }, [onChange]);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "time"
  }, props, {
    onChange: handleChange
  }));
}
function URLWidget(props) {
  var options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "url"
  }, props));
}
function UpDownWidget(props) {
  var options = props.options, registry = props.registry;
  var BaseInputTemplate2 = getTemplate("BaseInputTemplate", registry, options);
  return (0, import_jsx_runtime.jsx)(BaseInputTemplate2, _extends({
    type: "number"
  }, props));
}
function widgets() {
  return {
    AltDateWidget,
    AltDateTimeWidget,
    CheckboxWidget,
    CheckboxesWidget,
    ColorWidget,
    DateWidget,
    DateTimeWidget,
    EmailWidget,
    FileWidget,
    HiddenWidget,
    PasswordWidget,
    RadioWidget,
    RangeWidget,
    SelectWidget,
    TextWidget,
    TextareaWidget,
    TimeWidget,
    UpDownWidget,
    URLWidget
  };
}
function getDefaultRegistry() {
  return {
    fields: fields(),
    templates: templates(),
    widgets: widgets(),
    rootSchema: {},
    formContext: {},
    translateString: englishStringTranslator
  };
}
var Form = function(_Component) {
  _inheritsLoose(Form2, _Component);
  function Form2(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    _this.formElement = void 0;
    _this.getUsedFormData = function(formData, fields2) {
      if (fields2.length === 0 && typeof formData !== "object") {
        return formData;
      }
      var data = pick_default(formData, fields2);
      if (Array.isArray(formData)) {
        return Object.keys(data).map(function(key) {
          return data[key];
        });
      }
      return data;
    };
    _this.getFieldNames = function(pathSchema, formData) {
      var getAllPaths = function getAllPaths2(_obj, acc, paths) {
        if (acc === void 0) {
          acc = [];
        }
        if (paths === void 0) {
          paths = [[]];
        }
        Object.keys(_obj).forEach(function(key) {
          if (typeof _obj[key] === "object") {
            var newPaths = paths.map(function(path) {
              return [].concat(path, [key]);
            });
            if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== "") {
              acc.push(_obj[key][NAME_KEY]);
            } else {
              getAllPaths2(_obj[key], acc, newPaths);
            }
          } else if (key === NAME_KEY && _obj[key] !== "") {
            paths.forEach(function(path) {
              var formValue = get_default(formData, path);
              if (typeof formValue !== "object" || isEmpty_default(formValue)) {
                acc.push(path);
              }
            });
          }
        });
        return acc;
      };
      return getAllPaths(pathSchema);
    };
    _this.onChange = function(formData, newErrorSchema, id) {
      var _this$props = _this.props, extraErrors = _this$props.extraErrors, omitExtraData = _this$props.omitExtraData, liveOmit = _this$props.liveOmit, noValidate = _this$props.noValidate, liveValidate = _this$props.liveValidate, onChange = _this$props.onChange;
      var _this$state = _this.state, schemaUtils = _this$state.schemaUtils, schema = _this$state.schema;
      if (isObject(formData) || Array.isArray(formData)) {
        var newState = _this.getStateFromProps(_this.props, formData);
        formData = newState.formData;
      }
      var mustValidate = !noValidate && liveValidate;
      var state = {
        formData,
        schema
      };
      var newFormData = formData;
      if (omitExtraData === true && liveOmit === true) {
        var retrievedSchema = schemaUtils.retrieveSchema(schema, formData);
        var pathSchema = schemaUtils.toPathSchema(retrievedSchema, "", formData);
        var fieldNames = _this.getFieldNames(pathSchema, formData);
        newFormData = _this.getUsedFormData(formData, fieldNames);
        state = {
          formData: newFormData
        };
      }
      if (mustValidate) {
        var schemaValidation = _this.validate(newFormData);
        var errors = schemaValidation.errors;
        var errorSchema = schemaValidation.errorSchema;
        var schemaValidationErrors = errors;
        var schemaValidationErrorSchema = errorSchema;
        if (extraErrors) {
          var merged = validationDataMerge(schemaValidation, extraErrors);
          errorSchema = merged.errorSchema;
          errors = merged.errors;
        }
        state = {
          formData: newFormData,
          errors,
          errorSchema,
          schemaValidationErrors,
          schemaValidationErrorSchema
        };
      } else if (!noValidate && newErrorSchema) {
        var _errorSchema = extraErrors ? mergeObjects(newErrorSchema, extraErrors, "preventDuplicates") : newErrorSchema;
        state = {
          formData: newFormData,
          errorSchema: _errorSchema,
          errors: toErrorList(_errorSchema)
        };
      }
      _this.setState(state, function() {
        return onChange && onChange(_extends({}, _this.state, state), id);
      });
    };
    _this.reset = function() {
      var onChange = _this.props.onChange;
      var newState = _this.getStateFromProps(_this.props, void 0);
      var newFormData = newState.formData;
      var state = {
        formData: newFormData,
        errorSchema: {},
        errors: [],
        schemaValidationErrors: [],
        schemaValidationErrorSchema: {}
      };
      _this.setState(state, function() {
        return onChange && onChange(_extends({}, _this.state, state));
      });
    };
    _this.onBlur = function(id, data) {
      var onBlur = _this.props.onBlur;
      if (onBlur) {
        onBlur(id, data);
      }
    };
    _this.onFocus = function(id, data) {
      var onFocus = _this.props.onFocus;
      if (onFocus) {
        onFocus(id, data);
      }
    };
    _this.onSubmit = function(event) {
      event.preventDefault();
      if (event.target !== event.currentTarget) {
        return;
      }
      event.persist();
      var _this$props2 = _this.props, omitExtraData = _this$props2.omitExtraData, extraErrors = _this$props2.extraErrors, noValidate = _this$props2.noValidate, onSubmit = _this$props2.onSubmit;
      var newFormData = _this.state.formData;
      var _this$state2 = _this.state, schema = _this$state2.schema, schemaUtils = _this$state2.schemaUtils;
      if (omitExtraData === true) {
        var retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);
        var pathSchema = schemaUtils.toPathSchema(retrievedSchema, "", newFormData);
        var fieldNames = _this.getFieldNames(pathSchema, newFormData);
        newFormData = _this.getUsedFormData(newFormData, fieldNames);
      }
      if (noValidate || _this.validateForm()) {
        var errorSchema = extraErrors || {};
        var errors = extraErrors ? toErrorList(extraErrors) : [];
        _this.setState({
          formData: newFormData,
          errors,
          errorSchema,
          schemaValidationErrors: [],
          schemaValidationErrorSchema: {}
        }, function() {
          if (onSubmit) {
            onSubmit(_extends({}, _this.state, {
              formData: newFormData,
              status: "submitted"
            }), event);
          }
        });
      }
    };
    if (!props.validator) {
      throw new Error("A validator is required for Form functionality to work");
    }
    _this.state = _this.getStateFromProps(props, props.formData);
    if (_this.props.onChange && !deepEquals(_this.state.formData, _this.props.formData)) {
      _this.props.onChange(_this.state);
    }
    _this.formElement = (0, import_react.createRef)();
    return _this;
  }
  var _proto = Form2.prototype;
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    var nextState = this.getStateFromProps(nextProps, nextProps.formData);
    if (!deepEquals(nextState.formData, nextProps.formData) && !deepEquals(nextState.formData, this.state.formData) && nextProps.onChange) {
      nextProps.onChange(nextState);
    }
    this.setState(nextState);
  };
  _proto.getStateFromProps = function getStateFromProps(props, inputFormData) {
    var state = this.state || {};
    var schema = "schema" in props ? props.schema : this.props.schema;
    var uiSchema = ("uiSchema" in props ? props.uiSchema : this.props.uiSchema) || {};
    var edit = typeof inputFormData !== "undefined";
    var liveValidate = "liveValidate" in props ? props.liveValidate : this.props.liveValidate;
    var mustValidate = edit && !props.noValidate && liveValidate;
    var rootSchema = schema;
    var schemaUtils = state.schemaUtils;
    if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {
      schemaUtils = createSchemaUtils(props.validator, rootSchema);
    }
    var formData = schemaUtils.getDefaultFormState(schema, inputFormData);
    var retrievedSchema = schemaUtils.retrieveSchema(schema, formData);
    var getCurrentErrors = function getCurrentErrors2() {
      if (props.noValidate) {
        return {
          errors: [],
          errorSchema: {}
        };
      } else if (!props.liveValidate) {
        return {
          errors: state.schemaValidationErrors || [],
          errorSchema: state.schemaValidationErrorSchema || {}
        };
      }
      return {
        errors: state.errors || [],
        errorSchema: state.errorSchema || {}
      };
    };
    var errors;
    var errorSchema;
    var schemaValidationErrors = state.schemaValidationErrors;
    var schemaValidationErrorSchema = state.schemaValidationErrorSchema;
    if (mustValidate) {
      var schemaValidation = this.validate(formData, schema, schemaUtils);
      errors = schemaValidation.errors;
      errorSchema = schemaValidation.errorSchema;
      schemaValidationErrors = errors;
      schemaValidationErrorSchema = errorSchema;
    } else {
      var currentErrors = getCurrentErrors();
      errors = currentErrors.errors;
      errorSchema = currentErrors.errorSchema;
    }
    if (props.extraErrors) {
      var merged = validationDataMerge({
        errorSchema,
        errors
      }, props.extraErrors);
      errorSchema = merged.errorSchema;
      errors = merged.errors;
    }
    var idSchema = schemaUtils.toIdSchema(retrievedSchema, uiSchema["ui:rootFieldId"], formData, props.idPrefix, props.idSeparator);
    var nextState = {
      schemaUtils,
      schema,
      uiSchema,
      idSchema,
      formData,
      edit,
      errors,
      errorSchema,
      schemaValidationErrors,
      schemaValidationErrorSchema
    };
    return nextState;
  };
  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return shouldRender(this, nextProps, nextState);
  };
  _proto.validate = function validate(formData, schema, altSchemaUtils) {
    if (schema === void 0) {
      schema = this.props.schema;
    }
    var schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;
    var _this$props3 = this.props, customValidate = _this$props3.customValidate, transformErrors = _this$props3.transformErrors, uiSchema = _this$props3.uiSchema;
    var resolvedSchema = schemaUtils.retrieveSchema(schema, formData);
    return schemaUtils.getValidator().validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);
  };
  _proto.renderErrors = function renderErrors(registry) {
    var _this$state3 = this.state, errors = _this$state3.errors, errorSchema = _this$state3.errorSchema, schema = _this$state3.schema, uiSchema = _this$state3.uiSchema;
    var formContext = this.props.formContext;
    var options = getUiOptions(uiSchema);
    var ErrorListTemplate = getTemplate("ErrorListTemplate", registry, options);
    if (errors && errors.length) {
      return (0, import_jsx_runtime.jsx)(ErrorListTemplate, {
        errors,
        errorSchema: errorSchema || {},
        schema,
        uiSchema,
        formContext,
        registry
      });
    }
    return null;
  };
  _proto.getRegistry = function getRegistry() {
    var _this$props$templates;
    var _this$props4 = this.props, customTranslateString = _this$props4.translateString, _this$props4$uiSchema = _this$props4.uiSchema, uiSchema = _this$props4$uiSchema === void 0 ? {} : _this$props4$uiSchema;
    var schemaUtils = this.state.schemaUtils;
    var _getDefaultRegistry = getDefaultRegistry(), fields2 = _getDefaultRegistry.fields, templates2 = _getDefaultRegistry.templates, widgets2 = _getDefaultRegistry.widgets, formContext = _getDefaultRegistry.formContext, translateString = _getDefaultRegistry.translateString;
    return {
      fields: _extends({}, fields2, this.props.fields),
      templates: _extends({}, templates2, this.props.templates, {
        ButtonTemplates: _extends({}, templates2.ButtonTemplates, (_this$props$templates = this.props.templates) === null || _this$props$templates === void 0 ? void 0 : _this$props$templates.ButtonTemplates)
      }),
      widgets: _extends({}, widgets2, this.props.widgets),
      rootSchema: this.props.schema,
      formContext: this.props.formContext || formContext,
      schemaUtils,
      translateString: customTranslateString || translateString,
      globalUiOptions: uiSchema[UI_GLOBAL_OPTIONS_KEY]
    };
  };
  _proto.submit = function submit() {
    if (this.formElement.current) {
      this.formElement.current.dispatchEvent(new CustomEvent("submit", {
        cancelable: true
      }));
      this.formElement.current.requestSubmit();
    }
  };
  _proto.focusOnError = function focusOnError(error) {
    var _this$props5 = this.props, _this$props5$idPrefix = _this$props5.idPrefix, idPrefix = _this$props5$idPrefix === void 0 ? "root" : _this$props5$idPrefix, _this$props5$idSepara = _this$props5.idSeparator, idSeparator = _this$props5$idSepara === void 0 ? "_" : _this$props5$idSepara;
    var property = error.property;
    var path = toPath_default(property);
    if (path[0] === "") {
      path[0] = idPrefix;
    } else {
      path.unshift(idPrefix);
    }
    var elementId = path.join(idSeparator);
    var field = this.formElement.current.elements[elementId];
    if (!field) {
      field = this.formElement.current.querySelector("input[id^=" + elementId);
    }
    if (field.length) {
      field = field[0];
    }
    if (field) {
      field.focus();
    }
  };
  _proto.validateForm = function validateForm() {
    var _this$props6 = this.props, extraErrors = _this$props6.extraErrors, focusOnFirstError = _this$props6.focusOnFirstError, onError = _this$props6.onError;
    var formData = this.state.formData;
    var schemaValidation = this.validate(formData);
    var errors = schemaValidation.errors;
    var errorSchema = schemaValidation.errorSchema;
    var schemaValidationErrors = errors;
    var schemaValidationErrorSchema = errorSchema;
    if (errors.length > 0) {
      if (extraErrors) {
        var merged = validationDataMerge(schemaValidation, extraErrors);
        errorSchema = merged.errorSchema;
        errors = merged.errors;
      }
      if (focusOnFirstError) {
        if (typeof focusOnFirstError === "function") {
          focusOnFirstError(schemaValidation.errors[0]);
        } else {
          this.focusOnError(schemaValidation.errors[0]);
        }
      }
      this.setState({
        errors,
        errorSchema,
        schemaValidationErrors,
        schemaValidationErrorSchema
      }, function() {
        if (onError) {
          onError(errors);
        } else {
          console.error("Form validation failed", errors);
        }
      });
      return false;
    }
    return true;
  };
  _proto.render = function render() {
    var _UI_OPTIONS_KEY, _submitUiSchema;
    var _this$props7 = this.props, children = _this$props7.children, id = _this$props7.id, idPrefix = _this$props7.idPrefix, idSeparator = _this$props7.idSeparator, _this$props7$classNam = _this$props7.className, className = _this$props7$classNam === void 0 ? "" : _this$props7$classNam, tagName = _this$props7.tagName, name = _this$props7.name, method = _this$props7.method, target = _this$props7.target, action = _this$props7.action, autoComplete = _this$props7.autoComplete, enctype = _this$props7.enctype, acceptcharset = _this$props7.acceptcharset, _this$props7$noHtml5V = _this$props7.noHtml5Validate, noHtml5Validate = _this$props7$noHtml5V === void 0 ? false : _this$props7$noHtml5V, _this$props7$disabled = _this$props7.disabled, disabled = _this$props7$disabled === void 0 ? false : _this$props7$disabled, _this$props7$readonly = _this$props7.readonly, readonly = _this$props7$readonly === void 0 ? false : _this$props7$readonly, formContext = _this$props7.formContext, _this$props7$showErro = _this$props7.showErrorList, showErrorList = _this$props7$showErro === void 0 ? "top" : _this$props7$showErro, _internalFormWrapper = _this$props7._internalFormWrapper;
    var _this$state4 = this.state, schema = _this$state4.schema, uiSchema = _this$state4.uiSchema, formData = _this$state4.formData, errorSchema = _this$state4.errorSchema, idSchema = _this$state4.idSchema;
    var registry = this.getRegistry();
    var _SchemaField = registry.fields.SchemaField;
    var SubmitButton2 = registry.templates.ButtonTemplates.SubmitButton;
    var as = _internalFormWrapper ? tagName : void 0;
    var FormTag = _internalFormWrapper || tagName || "form";
    var _getUiOptions = getUiOptions(uiSchema), _getUiOptions$SUBMIT_ = _getUiOptions[SUBMIT_BTN_OPTIONS_KEY], submitOptions = _getUiOptions$SUBMIT_ === void 0 ? {} : _getUiOptions$SUBMIT_;
    if (disabled) {
      submitOptions = _extends({}, submitOptions, {
        props: _extends({}, submitOptions.props, {
          disabled: true
        })
      });
    }
    var submitUiSchema = (_submitUiSchema = {}, _submitUiSchema[UI_OPTIONS_KEY] = (_UI_OPTIONS_KEY = {}, _UI_OPTIONS_KEY[SUBMIT_BTN_OPTIONS_KEY] = submitOptions, _UI_OPTIONS_KEY), _submitUiSchema);
    return (0, import_jsx_runtime.jsxs)(FormTag, {
      className: className ? className : "rjsf",
      id,
      name,
      method,
      target,
      action,
      autoComplete,
      encType: enctype,
      acceptCharset: acceptcharset,
      noValidate: noHtml5Validate,
      onSubmit: this.onSubmit,
      as,
      ref: this.formElement,
      children: [showErrorList === "top" && this.renderErrors(registry), (0, import_jsx_runtime.jsx)(_SchemaField, {
        name: "",
        schema,
        uiSchema,
        errorSchema,
        idSchema,
        idPrefix,
        idSeparator,
        formContext,
        formData,
        onChange: this.onChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus,
        registry,
        disabled,
        readonly
      }), children ? children : (0, import_jsx_runtime.jsx)(SubmitButton2, {
        uiSchema: submitUiSchema,
        registry
      }), showErrorList === "bottom" && this.renderErrors(registry)]
    });
  };
  return Form2;
}(import_react.Component);
var _excluded = ["fields", "widgets", "templates"];
function withTheme(themeProps) {
  return (0, import_react.forwardRef)(function(_ref, ref) {
    var _themeProps$templates, _templates;
    var fields2 = _ref.fields, widgets2 = _ref.widgets, templates2 = _ref.templates, directProps = _objectWithoutPropertiesLoose(_ref, _excluded);
    fields2 = _extends({}, themeProps === null || themeProps === void 0 ? void 0 : themeProps.fields, fields2);
    widgets2 = _extends({}, themeProps === null || themeProps === void 0 ? void 0 : themeProps.widgets, widgets2);
    templates2 = _extends({}, themeProps === null || themeProps === void 0 ? void 0 : themeProps.templates, templates2, {
      ButtonTemplates: _extends({}, themeProps === null || themeProps === void 0 ? void 0 : (_themeProps$templates = themeProps.templates) === null || _themeProps$templates === void 0 ? void 0 : _themeProps$templates.ButtonTemplates, (_templates = templates2) === null || _templates === void 0 ? void 0 : _templates.ButtonTemplates)
    });
    return (0, import_jsx_runtime.jsx)(Form, _extends({}, themeProps, directProps, {
      fields: fields2,
      widgets: widgets2,
      templates: templates2,
      ref
    }));
  });
}
export {
  Form as default,
  getDefaultRegistry,
  withTheme
};
//# sourceMappingURL=@rjsf_core.js.map
