/* automatically generated by rust-bindgen 0.70.1 */

pub const LO_NAME_SIZE: u32 = 64;
pub const LO_KEY_SIZE: u32 = 32;
pub const __BITS_PER_LONG: u32 = 64;
pub const __BITS_PER_LONG_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const LO_CRYPT_NONE: u32 = 0;
pub const LO_CRYPT_XOR: u32 = 1;
pub const LO_CRYPT_DES: u32 = 2;
pub const LO_CRYPT_FISH2: u32 = 3;
pub const LO_CRYPT_BLOW: u32 = 4;
pub const LO_CRYPT_CAST128: u32 = 5;
pub const LO_CRYPT_IDEA: u32 = 6;
pub const LO_CRYPT_DUMMY: u32 = 9;
pub const LO_CRYPT_SKIPJACK: u32 = 10;
pub const LO_CRYPT_CRYPTOAPI: u32 = 18;
pub const MAX_LO_CRYPT: u32 = 20;
pub const LOOP_SET_FD: u32 = 19456;
pub const LOOP_CLR_FD: u32 = 19457;
pub const LOOP_SET_STATUS: u32 = 19458;
pub const LOOP_GET_STATUS: u32 = 19459;
pub const LOOP_SET_STATUS64: u32 = 19460;
pub const LOOP_GET_STATUS64: u32 = 19461;
pub const LOOP_CHANGE_FD: u32 = 19462;
pub const LOOP_SET_CAPACITY: u32 = 19463;
pub const LOOP_SET_DIRECT_IO: u32 = 19464;
pub const LOOP_SET_BLOCK_SIZE: u32 = 19465;
pub const LOOP_CONFIGURE: u32 = 19466;
pub const LOOP_CTL_ADD: u32 = 19584;
pub const LOOP_CTL_REMOVE: u32 = 19585;
pub const LOOP_CTL_GET_FREE: u32 = 19586;
pub const LO_FLAGS_READ_ONLY: _bindgen_ty_1 = 1;
pub const LO_FLAGS_AUTOCLEAR: _bindgen_ty_1 = 4;
pub const LO_FLAGS_PARTSCAN: _bindgen_ty_1 = 8;
pub const LO_FLAGS_DIRECT_IO: _bindgen_ty_1 = 16;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loop_info {
    pub lo_number: ::std::os::raw::c_int,
    pub lo_device: __kernel_old_dev_t,
    pub lo_inode: ::std::os::raw::c_ulong,
    pub lo_rdevice: __kernel_old_dev_t,
    pub lo_offset: ::std::os::raw::c_int,
    pub lo_encrypt_type: ::std::os::raw::c_int,
    pub lo_encrypt_key_size: ::std::os::raw::c_int,
    pub lo_flags: ::std::os::raw::c_int,
    pub lo_name: [::std::os::raw::c_char; 64usize],
    pub lo_encrypt_key: [::std::os::raw::c_uchar; 32usize],
    pub lo_init: [::std::os::raw::c_ulong; 2usize],
    pub reserved: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of loop_info"][::std::mem::size_of::<loop_info>() - 168usize];
    ["Alignment of loop_info"][::std::mem::align_of::<loop_info>() - 8usize];
    ["Offset of field: loop_info::lo_number"]
        [::std::mem::offset_of!(loop_info, lo_number) - 0usize];
    ["Offset of field: loop_info::lo_device"]
        [::std::mem::offset_of!(loop_info, lo_device) - 8usize];
    ["Offset of field: loop_info::lo_inode"][::std::mem::offset_of!(loop_info, lo_inode) - 16usize];
    ["Offset of field: loop_info::lo_rdevice"]
        [::std::mem::offset_of!(loop_info, lo_rdevice) - 24usize];
    ["Offset of field: loop_info::lo_offset"]
        [::std::mem::offset_of!(loop_info, lo_offset) - 32usize];
    ["Offset of field: loop_info::lo_encrypt_type"]
        [::std::mem::offset_of!(loop_info, lo_encrypt_type) - 36usize];
    ["Offset of field: loop_info::lo_encrypt_key_size"]
        [::std::mem::offset_of!(loop_info, lo_encrypt_key_size) - 40usize];
    ["Offset of field: loop_info::lo_flags"][::std::mem::offset_of!(loop_info, lo_flags) - 44usize];
    ["Offset of field: loop_info::lo_name"][::std::mem::offset_of!(loop_info, lo_name) - 48usize];
    ["Offset of field: loop_info::lo_encrypt_key"]
        [::std::mem::offset_of!(loop_info, lo_encrypt_key) - 112usize];
    ["Offset of field: loop_info::lo_init"][::std::mem::offset_of!(loop_info, lo_init) - 144usize];
    ["Offset of field: loop_info::reserved"]
        [::std::mem::offset_of!(loop_info, reserved) - 160usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loop_info64 {
    pub lo_device: __u64,
    pub lo_inode: __u64,
    pub lo_rdevice: __u64,
    pub lo_offset: __u64,
    pub lo_sizelimit: __u64,
    pub lo_number: __u32,
    pub lo_encrypt_type: __u32,
    pub lo_encrypt_key_size: __u32,
    pub lo_flags: __u32,
    pub lo_file_name: [__u8; 64usize],
    pub lo_crypt_name: [__u8; 64usize],
    pub lo_encrypt_key: [__u8; 32usize],
    pub lo_init: [__u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of loop_info64"][::std::mem::size_of::<loop_info64>() - 232usize];
    ["Alignment of loop_info64"][::std::mem::align_of::<loop_info64>() - 8usize];
    ["Offset of field: loop_info64::lo_device"]
        [::std::mem::offset_of!(loop_info64, lo_device) - 0usize];
    ["Offset of field: loop_info64::lo_inode"]
        [::std::mem::offset_of!(loop_info64, lo_inode) - 8usize];
    ["Offset of field: loop_info64::lo_rdevice"]
        [::std::mem::offset_of!(loop_info64, lo_rdevice) - 16usize];
    ["Offset of field: loop_info64::lo_offset"]
        [::std::mem::offset_of!(loop_info64, lo_offset) - 24usize];
    ["Offset of field: loop_info64::lo_sizelimit"]
        [::std::mem::offset_of!(loop_info64, lo_sizelimit) - 32usize];
    ["Offset of field: loop_info64::lo_number"]
        [::std::mem::offset_of!(loop_info64, lo_number) - 40usize];
    ["Offset of field: loop_info64::lo_encrypt_type"]
        [::std::mem::offset_of!(loop_info64, lo_encrypt_type) - 44usize];
    ["Offset of field: loop_info64::lo_encrypt_key_size"]
        [::std::mem::offset_of!(loop_info64, lo_encrypt_key_size) - 48usize];
    ["Offset of field: loop_info64::lo_flags"]
        [::std::mem::offset_of!(loop_info64, lo_flags) - 52usize];
    ["Offset of field: loop_info64::lo_file_name"]
        [::std::mem::offset_of!(loop_info64, lo_file_name) - 56usize];
    ["Offset of field: loop_info64::lo_crypt_name"]
        [::std::mem::offset_of!(loop_info64, lo_crypt_name) - 120usize];
    ["Offset of field: loop_info64::lo_encrypt_key"]
        [::std::mem::offset_of!(loop_info64, lo_encrypt_key) - 184usize];
    ["Offset of field: loop_info64::lo_init"]
        [::std::mem::offset_of!(loop_info64, lo_init) - 216usize];
};
#[doc = " struct loop_config - Complete configuration for a loop device.\n @fd: fd of the file to be used as a backing file for the loop device.\n @block_size: block size to use; ignored if 0.\n @info: struct loop_info64 to configure the loop device with.\n\n This structure is used with the LOOP_CONFIGURE ioctl, and can be used to\n atomically setup and configure all loop device parameters at once."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct loop_config {
    pub fd: __u32,
    pub block_size: __u32,
    pub info: loop_info64,
    pub __reserved: [__u64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of loop_config"][::std::mem::size_of::<loop_config>() - 304usize];
    ["Alignment of loop_config"][::std::mem::align_of::<loop_config>() - 8usize];
    ["Offset of field: loop_config::fd"][::std::mem::offset_of!(loop_config, fd) - 0usize];
    ["Offset of field: loop_config::block_size"]
        [::std::mem::offset_of!(loop_config, block_size) - 4usize];
    ["Offset of field: loop_config::info"][::std::mem::offset_of!(loop_config, info) - 8usize];
    ["Offset of field: loop_config::__reserved"]
        [::std::mem::offset_of!(loop_config, __reserved) - 240usize];
};
