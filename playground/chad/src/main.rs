#![feature(tcplistener_into_incoming)]
use std::io::Write;
use std::io::{BufRead, BufReader};
use std::net::TcpListener;

fn main() {
    TcpListener::bind("0.0.0.0:8080")
        .or(Err("Failed to bind"))
        .unwrap()
        .into_incoming()
        .filter_map(Result::ok)
        .for_each(|mut conn| {
            std::thread::spawn(move || {
                BufReader::new(conn.try_clone().unwrap())
                    .lines()
                    .flatten()
                    .for_each(|line| {
                        conn.write_all(
                            line.chars()
                                .collect::<Vec<char>>()
                                .chunks(8)
                                .filter_map(|chunk| {
                                    chunk
                                        .iter()
                                        .filter(|c| c.is_ascii_alphabetic() || **c == ' ')
                                        .cloned()
                                        .flat_map(char::to_lowercase)
                                        .map(|c| match c {
                                            'a' => [
                                                "  ##   ", " #  #  ", "#    # ", "###### ",
                                                "#    # ", "#    # ",
                                            ],
                                            'b' => [
                                                "#####  ", "#    # ", "#####  ", "#    # ",
                                                "#    # ", "#####  ",
                                            ],
                                            'c' => [
                                                " ####  ", "#    # ", "#      ", "#      ",
                                                "#    # ", " ####  ",
                                            ],
                                            'd' => [
                                                "#####  ", "#    # ", "#    # ", "#    # ",
                                                "#    # ", "#####  ",
                                            ],
                                            'e' => [
                                                "###### ", "#      ", "#####  ", "#      ",
                                                "#      ", "###### ",
                                            ],
                                            'f' => [
                                                "###### ", "#      ", "#####  ", "#      ",
                                                "#      ", "#      ",
                                            ],
                                            'g' => [
                                                " ####  ", "#    # ", "#      ", "#  ### ",
                                                "#    # ", " ####  ",
                                            ],
                                            'h' => [
                                                "#    # ", "#    # ", "###### ", "#    # ",
                                                "#    # ", "#    # ",
                                            ],
                                            'i' => [
                                                "###### ", "  ##   ", "  ##   ", "  ##   ",
                                                "  ##   ", "###### ",
                                            ],
                                            'j' => [
                                                "     # ", "     # ", "     # ", "     # ",
                                                "#    # ", " ####  ",
                                            ],
                                            'k' => [
                                                "#    # ", "#   #  ", "####   ", "#  #   ",
                                                "#   #  ", "#    # ",
                                            ],
                                            'l' => [
                                                "#      ", "#      ", "#      ", "#      ",
                                                "#      ", "###### ",
                                            ],
                                            'm' => [
                                                "#    # ", "##  ## ", "# ## # ", "#    # ",
                                                "#    # ", "#    # ",
                                            ],
                                            'n' => [
                                                "#    # ", "##   # ", "# #  # ", "#  # # ",
                                                "#   ## ", "#    # ",
                                            ],
                                            'o' => [
                                                " ####  ", "#    # ", "#    # ", "#    # ",
                                                "#    # ", " ####  ",
                                            ],
                                            'p' => [
                                                "#####  ", "#    # ", "#    # ", "#####  ",
                                                "#      ", "#      ",
                                            ],
                                            'q' => [
                                                " ####  ", "#    # ", "#    # ", "#  # # ",
                                                "#   #  ", " ### # ",
                                            ],
                                            'r' => [
                                                "#####  ", "#    # ", "#    # ", "#####  ",
                                                "#   #  ", "#    # ",
                                            ],
                                            's' => [
                                                " ####  ", "#      ", " ####  ", "     # ",
                                                "#    # ", " ####  ",
                                            ],
                                            't' => [
                                                "###### ", "  ##   ", "  ##   ", "  ##   ",
                                                "  ##   ", "  ##   ",
                                            ],
                                            'u' => [
                                                "#    # ", "#    # ", "#    # ", "#    # ",
                                                "#    # ", " ####  ",
                                            ],
                                            'v' => [
                                                "#    # ", "#    # ", "#    # ", "#    # ",
                                                " #  #  ", "  ##   ",
                                            ],
                                            'w' => [
                                                "#    # ", "#    # ", "#    # ", "# ## # ",
                                                "##  ## ", "#    # ",
                                            ],
                                            'x' => [
                                                "#    # ", " #  #  ", "  ##   ", "  ##   ",
                                                " #  #  ", "#    # ",
                                            ],
                                            'y' => [
                                                "#    # ", " #  #  ", "  ##   ", "  ##   ",
                                                "  ##   ", "  ##   ",
                                            ],
                                            'z' => [
                                                "###### ", "    #  ", "   #   ", "  #    ",
                                                " #     ", "###### ",
                                            ],
                                            ' ' => [
                                                "       ", "       ", "       ", "       ",
                                                "       ", "       ",
                                            ],
                                            _ => panic!(),
                                        })
                                        .chain(
                                            [["\n", "\n", "\n", "\n", "\n", "\n"]].iter().cloned(),
                                        )
                                        .map(|i| {
                                            i.into_iter()
                                                .map(|i| i.to_string())
                                                .collect::<Vec<String>>()
                                        })
                                        .reduce(|coll, next| {
                                            coll.into_iter()
                                                .zip(next)
                                                .map(|(coll, next)| format!("{}{}", coll, next))
                                                .collect()
                                        })
                                })
                                .map(|i| i.into_iter().collect::<String>())
                                .collect::<String>()
                                .as_bytes(),
                        )
                        .unwrap_or(())
                    })
            });
        })
}
